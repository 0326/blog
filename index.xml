<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>动感小前端的博客</title>
    <link>http://quanfeng.tech/blog/index.xml</link>
    <description>Recent content on 动感小前端的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 21 Jul 2018 21:42:50 +0800</lastBuildDate>
    <atom:link href="http://quanfeng.tech/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>小前端三周年杂记</title>
      <link>http://quanfeng.tech/blog/post/ali-three-year/</link>
      <pubDate>Sat, 21 Jul 2018 21:42:50 +0800</pubDate>
      
      <guid>http://quanfeng.tech/blog/post/ali-three-year/</guid>
      <description>

&lt;p&gt;一个工作三年的前端，应该是市场上的香饽饽了，同时也会步入焦虑区，会更多的思考未来的职业生涯。这三年过于顺利，反而有些不安。按照惯例，行文以省。&lt;/p&gt;

&lt;h2 id=&#34;青年危机&#34;&gt;青年危机&lt;/h2&gt;

&lt;p&gt;今年的新同学都陆续入职了，可以感受到现在的新人是越来越优秀了，刚好这几天满三周年，瞬间想到三年前自己入职的时候，真可谓长江后浪推前浪。另外按照&lt;a href=&#34;http://www.un.org/zh/events/youth/index.shtml&#34;&gt;联合国关于青年的定义&lt;/a&gt;，发现25已经不配做青年了！？&lt;/p&gt;

&lt;p&gt;这波变老猝不及防，然遗憾的是人过青年依然还在外地打工，日夜工作却无所成就，再看看别人家的孩子，年纪轻轻就成了专家/高级专家，工作三年就年薪七八十万了，只觉后背凉凉。都是九年义务教育三年高中四年大学，别人家的孩子就是优秀！&lt;/p&gt;

&lt;p&gt;鉴于身边优秀的小伙伴太多，曾一度让我怀疑自己，我是谁？我在哪？我在干什么？&lt;/p&gt;

&lt;p&gt;不过还好我心态好，人与人天生就不在一个起跑线上，有的人不仅起点比你高，比你聪明，比你努力，还比你运气好，就算你再怎么努力都难以望其项背。不要让这些外界因素扰乱了自己的节奏，按照自己的规划稳步前行就好。生活不需要过得比别人好。活成自己想要的样子。&lt;/p&gt;

&lt;h2 id=&#34;职业规划&#34;&gt;职业规划&lt;/h2&gt;

&lt;p&gt;所以自己的职业规划和节奏就很重要了，这个没想清楚就很容易“混日子”了。我一直以为自己很清楚，但是转岗时被大老板一句“你对自己未来十年的规划是什么样子的？”直接问懵了。三两年短期计划有，但是十年还真没想过。&lt;/p&gt;

&lt;p&gt;这就是眼光的差别，看的更远，才能走的更远。此前我就比较焦虑，一毕业就一直待在一个环境，无论是技术还是视野都会存在盲区，要做到这些必须走出舒适区，不断丰富自己的履历，感受不同的工作氛围和技术栈，来寻找真正适合自己的路。&lt;/p&gt;

&lt;p&gt;跳槽是必要的，这是一个选择的过程，在对比中找出真正适合自己的岗位和工作环境。况且大部分人也只能趁着年轻多做选择，一旦过了时间再跳槽于成本和风险都是非常大的。不过最终，我们还是得找个落脚点，去找一群合适的人，去专注于某个方向，做一些理想的事情。经我观察，阿里诸多高 P 都是如此，这些大佬们早已实现财务自由，却还在努力工作，完全就是出于理想主义和社会使命在奋斗。后来看到云龙前辈的&lt;a href=&#34;https://github.com/fouber/blog/issues/41&#34;&gt;成长之路&lt;/a&gt;，醍醐灌顶，刚好也佐证了这个观点：&lt;/p&gt;

&lt;p&gt;我把整个职业生涯分三个阶段：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;第一阶段，一技之长。就是深耕你的专业技能，你的专业技术。
第二阶段，独立做事。当你的一技之长达到一定深度的时候，需要开始思考如何独立做事。
第三阶段，拥有事业。选择一份使命，带领团队实现它。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;目前应该在第二阶段，刚进阿里时曾给自己定了一个冷冰冰的规划：两年内升6五年内到7。现在来看过于功利了，这样的目标并不会让我快乐，更多的应该放在自身的成长和所做的事情之上。热爱你所做的事情自然愿意付出更多，拿到好的结果，届时升职加薪只是水到渠成的事情。每个人都想升职，却不是每个人都能做的出色，硬抗只会让自己心更累，努力之前选择更重要。我现在仍然无法规划出十年后的样子，但有一点可以确认：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;找一个适合的工作环境，一群有激情有想法的人；&lt;/li&gt;
&lt;li&gt;做一些有趣的事情，做一点有价值的东西。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是一种态度，而且会贯穿整个职业生涯，即使到了第三阶段依然适用，会让自己的工作变得更有意思。&lt;/p&gt;

&lt;h2 id=&#34;接触更多人-创造更多可能性&#34;&gt;接触更多人，创造更多可能性&lt;/h2&gt;

&lt;p&gt;我见过一些人，每天接触的除了同事就是家人好友。如果一直都在同样的环境，一直都在和同样的人交流，一直都在思考同样的问题，自己的思维和视野就很容易固化，甚至每天和别人聊天时都是那几个话题，对中老年人这些可能还好，但如果年轻人也这样就十分可怕了。时间一长即使自己意识到危机，想出去做点什么时已经晚了，而自己除了继续留在原地已别无选择。&lt;/p&gt;

&lt;p&gt;自己前两年也是这个状态，直到今年接触了各种不同背景，不同行业的人，突然茅塞顿开了。&lt;/p&gt;

&lt;p&gt;与人交流能学到很多，比如和自由职业者交流，能让自己更加重视时间管理，注重个人品牌效应，和玩股票的人交流，能学到很多理财的技巧，和创业者交流，能感受到不负青春的热血涌动，感受到不同行业间的隔阂，感受到生活中处处充满了机会。跳出这个环境，发现人生充满了许多乐趣和可能性。&lt;/p&gt;

&lt;p&gt;尤其是，跳出职业思维来看问题会有更多机会。比如我一直在大公司工作，公司这套研发流程是非常完善的，我习以为常的东西在一些小公司来看却是要专门花钱来做技术咨询的；还有我身边都是专业背景很强的人，一些很常见的技术产品在一些非行业人员来看是要花大价钱来做的。比如一个垃圾手机点餐系统可能要花几万到几十万不等，但是支付宝内随便找个全栈前端做一个月肯定没问题，立马实现月入六位数。有次买瓷砖的时候老板问我做一个3D的室内瓷砖效果展示应用要多少钱，我当时觉得挺简单，但又不好预估费用，当时老板说五万块够了没？我心中一愣卧槽这玩意要五万块，我要是自由职业者果断接了！&lt;/p&gt;

&lt;p&gt;当然大部分时候我们是在跟同事接触，其实也蛮有意思，身边有很多优秀的同事，他们的工作方式，编码方式都值得借鉴。我三年接触了三个老板，每个都有自己独特的办事方式，学到不少姿势。&lt;/p&gt;

&lt;p&gt;视野和渠道越多，想法就会更多，更容易灵机一动，出奇制胜，而有时候灵机一动就容易做出伟大的决定。&lt;/p&gt;

&lt;h2 id=&#34;谈谈工作&#34;&gt;谈谈工作&lt;/h2&gt;

&lt;p&gt;今年换了部门，主要谈谈期间的一些想法和收获。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;跳槽/转岗/换一个环境还是很有必要，对比才会更容易发现适合自己的环境。现在的毕业生都拿了好几家 offer，都去实习一下是很明智的选择。&lt;/li&gt;
&lt;li&gt;也不要老是想着跳槽，觉得自己工资涨不上去，关键点是找到适合自己环境好好发展下去。短期看薪资确实是跳槽涨的快，长期还是得看发展。&lt;/li&gt;
&lt;li&gt;很多人老想着进核心部门，进成熟部门，然鹅新部门机会其实更大。更加类似创业公司一点，去开疆拓土。但是比创业公司更好的是有阿里这个大集团把控，成功率更高。所以在这些部门晋升往往更快，风险与收益并存。&lt;/li&gt;
&lt;li&gt;被动你就输了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;工作上，由一线转到二线了，由前线业务转到了内部技术创新。感觉无论是做技术还是做业务，虽然出发点不一样，但最后都得落到业务上来。业务做久了会深挖技术，技术做多了会靠近业务，没有什么做业务不利于技术发展的工作，只有安于现状思而不学的人。两边都有自己的好处和坏处，关键是把合适的人放在合适的位置上。&lt;/p&gt;

&lt;h2 id=&#34;谈谈前端&#34;&gt;谈谈前端&lt;/h2&gt;

&lt;p&gt;最后记录下这一年对前端圈的看法。新技术都在平稳进行着，有了更多积淀和成果，已经步入软件工程的时代了。前端热潮也渐渐退去，相对的也演变出一些细分方向，有大佬做了总结：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;中后台能力&lt;/li&gt;
&lt;li&gt;泛 Node 服务&lt;/li&gt;
&lt;li&gt;大终端技术&lt;/li&gt;
&lt;li&gt;互动图形&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里说下自己的看法，从职能方向上看都挺好，个人更看好 端技术 + 图形方向。另外，现在 AI 领域，机器学习异军突起，前端作为应用层要介入是迟早的事，后面对算法的要求会越来越高，前端之间的区分度会越来越大。&lt;/p&gt;

&lt;p&gt;前端娱乐圈依然没有让我失望，充满惊喜，只是自己学会了屏蔽过滤。像 “React 和 Vue 到底谁比较好？”，”xxx 跟 xx 比水平到底怎么样？”，“如何看待 xxx 面试官连这种题都不会做” 这种狗屎问题，现在都直接屏蔽拉黑，有时候程序员被其他行业嘲笑情商低，看到这些问题真的感觉无力反驳。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;三年前因为热爱选择前端，这期间每个阶段都有过迷茫，焦虑。乐观一点，皮实一点，经常反思，总能找到方向，很期待未来会有什么样的挑战。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2018.07 杭州，蚂蚁金服&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>小前端两周年杂记</title>
      <link>http://quanfeng.tech/blog/post/ali-two-year/</link>
      <pubDate>Mon, 24 Jul 2017 21:42:50 +0800</pubDate>
      
      <guid>http://quanfeng.tech/blog/post/ali-two-year/</guid>
      <description>

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;去年工作一周年时，写了一篇总结（&lt;a href=&#34;http://quanfeng.tech/blog/post/ali-one-year/&#34;&gt;小前端一周年杂记&lt;/a&gt;），现在来看里面一些观点还是颇为幼稚的。如今过了两周年了，我想还是继续记录一下自己的职业历程和真实想法。或许明年再看此文依然会觉得很幼稚，但这也正是我所期望的。&lt;/p&gt;

&lt;p&gt;相比第一年一直在搬砖，第二年的职业经历要丰富的多，技术上依然没有什么突破，倒是自己的很多观念和想法被不断刷新。所以，本文是没有任何技术干货的，更多的是思考。&lt;/p&gt;

&lt;p&gt;这是十年技术之路的第二篇，以下是年度关键字总结。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;以下内容仅代表个人观点，与任何组织及公司无关，若有不当之处请及时指出或者大吼一声 LZSB 然后关闭页面。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;落地业务&#34;&gt;落地业务&lt;/h2&gt;

&lt;p&gt;我所遇到的几乎所有的程序员，都是倾向于去做基础建设做底层开发做纯技术的，认为做业务没有什么挑战性并且不利于技术成长。&lt;/p&gt;

&lt;p&gt;直到后来我意识到包括自己在内的大部分程序员其实都是在做业务开发，最多不过是做做组件化，工具化。让一群内功不够的人去做基础建设是十分冒险的。业务代码没设计好影响的是一条线，大不了项目重构，基础设施没设计好影响的是一大片，动不动就来个技术大升级大迁移简直就是噩梦。优化迭代不可避免，只是高手上路可以少走很多弯路。&lt;/p&gt;

&lt;p&gt;而对于业务程序员，经常会被业务需求变更、资源排期、开发质量等问题搞得焦头烂额，你连这些问题都处理不好，还好意思去做基础建设，去搞底层开发？况且编程的核心问题就是抽象(个人观点)，函数，类，模块，组件都可以看做一种抽象方式，设计的好可以降低复杂度，更好的“拥抱变化”。因此从本质上讲，所有程序员编程时所面临的问题其实是一样的，那就是抽象设计。&lt;/p&gt;

&lt;p&gt;做业务并没有想象中的那么简单，需求在不断变化，我们除了在流程上去限制变化，还得从编码抽象上去拥抱变化。业务程序员也不能只从技术角度去思考问题。&lt;strong&gt;技术需要反哺业务，最终创造价值，这才是我们作为一个技术人员核心使命，程序员端正自己的位置很重要&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;说这么多，其实就是想说明业务编码被忽视的技术价值。这是自己观念上的变化之一。这一年，很多精力都投入在了业务中，也取得了一些结果。况且在体制内，只有大家一起努力把业务做好了，才能拿到更多的年终奖，更快的升职加薪。踏踏实实做好业务，闷声发大财岂不美哉。&lt;/p&gt;

&lt;h2 id=&#34;技术大会&#34;&gt;技术大会&lt;/h2&gt;

&lt;p&gt;现在前端圈的技术大会越来越多了，这一年（2016.07~2017.07），有幸参加了 JSConf（&lt;a href=&#34;https://www.zhihu.com/question/50244455&#34;&gt;参加 宁JS（JSConf CN 2016）是个什么样的体验？&lt;/a&gt;），SFDC，D2（&lt;a href=&#34;https://www.zhihu.com/question/52777303&#34;&gt;参加第11届D2前端技术论坛，你有什么收获？&lt;/a&gt;）以及 WeexConf，感受颇深。&lt;/p&gt;

&lt;h4 id=&#34;不纯粹的商业活动&#34;&gt;不纯粹的商业活动&lt;/h4&gt;

&lt;p&gt;现在很多技术大会打着技术的名号实则是在招聘打广告做宣传。作为商业活动广告一下无可厚非，但如果因此影响到会议本身的内容和质量，是让人寒心的。主办方对于讲师的内容和演讲的质量如果没有一个较高的筛选标准，就好像是把台下几百上千程序猿当猴耍：我买这么贵的票大老远跑过来，你就给我看这个？&lt;/p&gt;

&lt;p&gt;这也引发了自己思考，到底以怎样的姿势去参会才是合理的？&lt;/p&gt;

&lt;h4 id=&#34;参会的核心是交流-提升自己的参与感&#34;&gt;参会的核心是交流，提升自己的参与感&lt;/h4&gt;

&lt;p&gt;一开始参会感觉蛮有意思，参加几次 Conf 之后就会觉得越来越没有意思，一是新鲜感降低，二是演讲质量不符预期，三是分享内容乏味。后来我仔细总结了下，抛开客观因素，主观原因在于自己是否积极参与到会议中了，&lt;strong&gt;参会的核心是交流，提升自己的参与感，这样才能有更多收获，而不仅仅是作为一个听众&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;NingJS 是自己参加的第一个 Conf， 此前我提前了解了每个讲师要讲的内容，所以现场不至于太懵逼。中途还上台打过广告，提过问题，After Part上主动和大神交流，知乎上的回答也收获了不少赞，整个过程参与感很强，所以感觉印象深刻。而后面的 SFDC，D2和 WeexConf，基本是作为一个吃瓜听众过去的，所以印象并不深刻，再加上演讲内容质量的参差不齐，收获并不大。这其中的落差，很大程度上取决于你在整个过程中的参与感。&lt;/p&gt;

&lt;p&gt;所以，&lt;strong&gt;一场友好的技术大会，应该要给参与者们提供更多的沟通交流机会；一场深刻的技术大会，应该是让自己积极参与到互动交流中去的大会&lt;/strong&gt;。如果仅为学习，自学比大老远跑过去听别人讲 PPT 效率要高的多。&lt;/p&gt;

&lt;h2 id=&#34;社区-分享&#34;&gt;社区&amp;amp;分享&lt;/h2&gt;

&lt;p&gt;世界上有两种程序员，一种上开源社区的，一种不上的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;脱离社区，知识圈和技术边界是封闭的，拥抱社区，才能可持续发展&lt;/strong&gt;。互联网本身就是一个开放的平台，我们每天在google上搜索各种文章，各种问题的解决方案，都要归功于这些热衷分享自己知识，热衷于帮助别人解决问题的人们。你分享的一篇文章可能解决了一个普遍性的技术问题，而当别人遇到类似问题因为你的分享而节省了很多时间，找到了正确的解决方案时，你就创造了额外的价值，并且越多人因为你的文章而受益，你所创造的价值就越大，这些是薪资无法衡量的。而分享的价值远不止于此，它往往还伴随着人脉的扩张和个人及团体影响力的提升，影响力的价值也是不可估量的。&lt;/p&gt;

&lt;p&gt;分享的形式有很多种，线上有博客，Live，视频等，线下有微分享，讲座，技术大会等。我其实很懒，差不每个月会写点东西，之前加入了 SF 的讲师直到现在也没开讲&amp;hellip;线下的分享其实更有意义，因为可以更好的交流和表达，今年还有幸去大学当了一回讲师，算是个不错的开始。团队现在每周都有微分享也挺好的，技术人员的这些软技能在关键时刻会非常有用，分享能锻炼演说能力，拓宽自己的技术视野，排除知识误解等等。&lt;/p&gt;

&lt;p&gt;对技术人来说，&lt;strong&gt;排除知识误解很重要&lt;/strong&gt;。工作以后的大部分技术都是自学，每个人的理解能力是不同的，对知识的理解多多少少会有些偏差。如果不跟别人去交流，去分享自己的看法，可能永远不知道自己错在哪里。就好比我在这篇文章里面表达了很多自以为正确的错误观点，如果我不发表出来别人就无法指出我的错误，我也无法得知我错在哪里，在这里先感谢指出我错误的各位大神们。&lt;/p&gt;

&lt;h2 id=&#34;晋升后的思考&#34;&gt;晋升后的思考&lt;/h2&gt;

&lt;p&gt;貌似大家到了一个新的层级都会有一段迷茫或者适应期。从去年底晋升到现在已过半年，期间自己也思考了很多问题，晋升究竟给我带来了哪些变化？我是否达到了预期？是否发挥了更高的价值？如何去寻找更大的挑战？如何向下一个层级迈进&amp;hellip;&lt;/p&gt;

&lt;p&gt;然而这半年多来在工作上并没有体现出多大不同，倒是思想上发生了很多变化。&lt;/p&gt;

&lt;h4 id=&#34;戒骄戒躁&#34;&gt;戒骄戒躁&lt;/h4&gt;

&lt;p&gt;晋升是公司对员工能力的认可，这个能力是综合的，更多的体现在你负责的业务中来。晋升是公司体制内对个人能力的认可，并不完全代表个人水平，所以不存在晋升的同学就比没晋升的同学要强，这其中影响因素很多。假如脱离了体制，个人究竟处在业界什么水平，自身短板和优势在哪里，发展瓶颈在哪里，自己心里得有杆秤。&lt;/p&gt;

&lt;h4 id=&#34;责任越大&#34;&gt;责任越大&lt;/h4&gt;

&lt;p&gt;晋升是公司对员工能力的认可，晋升意味着**，**越高，责任越大，老板对你的期望越高。如果无法寻找新的挑战做出新的亮点以更高的标准要求自己，自然是无法满足期望的，最后只能3.5甚至3.25了。&lt;/p&gt;

&lt;h4 id=&#34;寻找突破&#34;&gt;寻找突破&lt;/h4&gt;

&lt;p&gt;新的起点需要新的要求，而当大家都站在新的高度时，要让所有人都找到突破点其实是不可能的。&lt;strong&gt;成长是自己的事情，需要自己去规划&lt;/strong&gt;。团队面临的业务和问题是有限的，找到适合自己的点去发力并做好，实在找不到就以下一个层级的标准来要求自己总没错的。再不行就换一个环境，发展才是硬道理。&lt;/p&gt;

&lt;h2 id=&#34;竞争力&#34;&gt;竞争力&lt;/h2&gt;

&lt;p&gt;有时候 P5/P6/P7 可能干的活差不多，如何体现竞争力？如何体现出水平差异？一个人的竞争力在哪里，一个程序员的竞争力在哪里，一个前端的竞争力又在哪里？跟别人比我的竞争力又在哪里？&lt;/p&gt;

&lt;p&gt;这些问题我想了很久，并没有得到一个理想的答案。但是我确信的是，决定程序员竞争力的往往不是某些具体的技术能力或者管理能力，而是思维方式和执行能力。&lt;/p&gt;

&lt;p&gt;一个人的能力和潜力如何，工作一段时间大家都是能感觉出来的。我观察了身边一些大牛，发现牛逼的人总是相似的，都具有敏锐的思维能力和高效的执行能力。处在业务线上的技术人员，竞争力往往体现在办事能力上。这种素质与专业能力无关，这些人，即使是抛开专业技能换了一个行业依然能在新的领域做到最好，这就是作为人的竞争力。&lt;/p&gt;

&lt;p&gt;而在技术上，不同类型的程序员在技术上体现的竞争力也是不一样的。之前还一本正经的去看编译原理，算法，机器学习这些容易在外面装逼的计算机基础知识，后来发现花了大量精力去看这些东西然而工作上并没有用到，而且由于实战少对其理解并不深刻，还是看重构，代码大全或者 SICP 这些思想性比较强的知识比较好，可以摆正自己的三观。&lt;/p&gt;

&lt;p&gt;后来我越看，越是焦虑，觉得这就是个无底洞，计算机的范畴太广了，就算你兴趣再浓也无法面面俱到。单是前端领域就已经包含了很多，在巩固基础的同时还得与时俱进引入新技术来提高工作效率，光是做到这两点就很不容易了。&lt;/p&gt;

&lt;p&gt;学海无涯而吾生有涯，以有涯随无涯，殆已。&lt;strong&gt;找准自己的方向并将精力投入在对自己最有价值的技术上，才能更好地形成自己的技术竞争力&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;而具体到前端的竞争力，还是在端，在于体验。刚好今年BU的一大目标就是把 UE 做好，这也让自己更加重视体验这块。前端和 UED 一起背负了体验上的使命，前端和后端一起背负了技术上的使命，我们需要作出权衡来背负产品上的使命。一个搜索框，功能实现可以很简单，要做好体验也会很复杂，一个前端的竞争力，往往就体现在这些细节。阿里的产品长久以来被吐槽体验，我想这些都会逐步改善吧。&lt;/p&gt;

&lt;h2 id=&#34;思维高度&#34;&gt;思维高度&lt;/h2&gt;

&lt;p&gt;偶然间翻到4年前写的文章，那时候还在学校做项目，有这样一段话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;永远对自己有信心，对自己的项目有信心。对自己的付出应该要有一种自豪感，因为我们所做的东西是有益于这个社会的，而正是这种自豪感，让你怀着责任感一直做下去，并且会做的越来越好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我很吃惊，我当时竟然能说出这样的话！（明显像是老板对员工说的）
我很惭愧，我来公司做了这么多项目，却没有一个萌生过这种想法。（明显自己还是底层农民工）&lt;/p&gt;

&lt;p&gt;老实说很多项目我还持怀疑态度（比如当听到要在微信中做传播时），业务方自己有时也没有底气，我们只是向着 KPI 拿需求办事，思维层面上自然显得被动。说到底，我是把自己当成了“资源”，而不是一起合作的“人”，这样业务方也只会把你当“资源”，这样自己的思维方式就会一直停留在任人差遣的“资源”阶段。而之前之所以有那样的想法，因为我们是整个项目的缔造者，产品就跟自己的孩子一样，而现在，自己更像是一颗螺丝钉。&lt;/p&gt;

&lt;p&gt;我是在一本正经的瞎说大实话，然即便如此，公司的体制限制了你的工作就是一颗螺丝钉，但是自己的思维却不能被限制于方寸之间。员工跟老板的思维高度肯定是不一样的，从员工到老板的过程需要不断跨越思维高度。成长的过程，不仅是技术和能力提升的过程，也是思维方式不断刷新的过程，不以更广的思维方式去思考问题，又如何能站在更高的高度去看世界？&lt;/p&gt;

&lt;h2 id=&#34;面试&#34;&gt;面试&lt;/h2&gt;

&lt;p&gt;面试是一个挑选人才的过程，对自己来说也是一个共同学习和进步的过程。我会尽我所能，到手的每一封简历都会认真看并熟悉其中的技术点，争取能对候选人有一个较为客观的评估。我没想到这么快就能参与到阿里的面试流程中来，这也算一个挑战吧。自己在这方面还是新手，需要多学习。&lt;/p&gt;

&lt;p&gt;另外多次下来，一点感受：
- 基本功真的很重要，就算工作数年的人也未必扎实；
- 技术人得对自己的职业有所规划，没有成长便是退步；
- 看到一些很有潜力的同学因为技术能力暂时不过关被刷真的很可惜；
- 简历评估阶段面的问题都很基础啊，你们面试前都不刷题的么？&lt;/p&gt;

&lt;p&gt;听说我们部门今年晋升的比例在整个集团内也是非常高的，听说看了我们 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/27008632&#34;&gt;招聘要求&lt;/a&gt; 的面试通过率更高，听说机会总是会给已经准备好的那些人，想内推的请联系我。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;做总结也是职业规划的一部分，这能让我清晰的认识到自己所处的位置以及下一步的方向。本来是打算在阿里呆满三年就出去浪的，这几天一冲动看来得多呆两年了，这也为自己的职业生涯增添了许多挑战。十年磨一剑，好好打铁，迎娶 UED 指日可待。&lt;/p&gt;

&lt;p&gt;这种毫无干货的文章我争取一年只发一次。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2017.07 杭州&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>如何优雅地理解 ECMAScript 中的对象</title>
      <link>http://quanfeng.tech/blog/post/ecmascript-object/</link>
      <pubDate>Sat, 24 Jun 2017 21:42:50 +0800</pubDate>
      
      <guid>http://quanfeng.tech/blog/post/ecmascript-object/</guid>
      <description>

&lt;h2 id=&#34;序&#34;&gt;序&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;ECMAScript is an object-oriented programming language for performing computations and manipulating computational objects within a host environment.
— 摘自&lt;a href=&#34;https://tc39.github.io/ecma262/#sec-overview&#34;&gt;《ECMAScript® 2018 Language Specification》&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近在看 ES 规范，越看越觉得这是一门神奇的语言。如标准所言，ES 是一门面向对象的编程语言，但它基于 prototype 的 OO 又很非主流。更神奇的是很多 JSer 拿着这门 OOP 来搞函数式和过程式编程，并且还浪的飞起。本文会围绕 ES 中的对象来展开，一起探索技术，走近科学（瞎扯淡，这并不是一篇正儿八经的技术文章）。&lt;/p&gt;

&lt;h2 id=&#34;创世篇&#34;&gt;创世篇&lt;/h2&gt;

&lt;h3 id=&#34;null&#34;&gt;null&lt;/h3&gt;

&lt;p&gt;null是万物之伊始，也是生命的尽头。null 是一种空灵的状态，似是非是，似空非空，正如 null == undefined 但是 null !== undefined，看起来什么都没有，其实是支潜力股。&lt;/p&gt;

&lt;p&gt;在 JS 宇宙中，null 是站在原型链顶端的男人，是所有对象原型的尽头，拥有毁灭一切的能力，看谁不爽赋值为 null，这样黑白无常在垃圾回收的时候便可以一波带走。&lt;/p&gt;

&lt;p&gt;后来 JS 的造物主 Brendan 觉得 null 的能力过于强大，于是便创造了超级英雄
 undefined 与之抗衡。undefined 诞生的初衷，是为了维护 JS 宇宙秩序，解决错误处理和类型转换带来的问题。但是自 undefined 出现之后世界却变得更加混乱，人类不知道何时召唤 null 何时该召唤 undefined。&lt;/p&gt;

&lt;p&gt;简单的说，undefined 表示此处应该有个值，但是这个值还没给出来，其实就是占了个坑，这个坑是语言内部实现帮你做的，&lt;strong&gt;程序员完全没有必要在代码中显示返回或者指定某个变量为 undefined&lt;/strong&gt;，undefined 的处理完全交给程序实现就是了。所以这其实是个无需暴露给用户的能力（&lt;code&gt;并不是说 undefined 没有用，实际上在一些框架和库的实现中大量用到了 undefined，比如 jQuery，这里是从设计的角度来看，并不是实践&lt;/code&gt;），传说 Google 爸爸在创建 Dart 宇宙的时候就去掉了 undefined，只保留了 null。&lt;/p&gt;

&lt;h3 id=&#34;object&#34;&gt;Object&lt;/h3&gt;

&lt;p&gt;古人信奉五行阴阳之说，认为世界由金木水火土五种基本元素构成，基本元素构成各种物质，物质构成世界。在 JS 宇宙中也一样，基本语言类型构成了各种对象，对象构成了整个 JS 世界，要理解这个世界，就得从找对象开始。&lt;/p&gt;

&lt;p&gt;在 ES5 时代，对象分三种：
- native object（原生对象），指语义完全由规范定义并且不掺杂任何宿主环境定义的的对象；
- host object（宿主对象），由执行环境提供，比如浏览器的window对象和history对象。JS里的对象不是原生对象就是宿主对象。
- build-in object（内置对象），由ECMA实现提供，程序执行时就存在的对象。所有内置对象都是原生对象。&lt;/p&gt;

&lt;p&gt;这三类对象相辅相成，亦相克相生。所谓的道生一，一生二，二生三，三生万物，在 JS 的世界观中，大概就是指的 null 生 Object，Object 生 native &amp;amp; host，native 又分化出buid-in，是为三才，森罗万象。&lt;/p&gt;

&lt;p&gt;然而编码不止，变化不息，在 ES6 时代，规范中有关对象的划分又变成了四种：
- ordinary object：普通对象，需要具备了对象的所有基本内置方法。
- exotic object：外来对象，如果不完全具备标准对象拥有的基本内置方法，就是外来对象。JS里的对象不是普通对象就是外来对象。
- standard object：标准对象，语义由本规范定义的对象。
- built-in object：内置对象，跟ES5中描述一样。&lt;/p&gt;

&lt;p&gt;对比来看，ES5 中对象是以宿主环境为条件划分的，ES6 中则是根据对象的基本内置方法。这其实要归结于 ES6 跨越性的变化，必然要动摇到一些基本规范描述来拥抱变化。所谓的无极生太极，太极生两仪，两仪生四象，在 JS 宇宙中大概，也许，null 就是无极，Object 就是太极，一内一外是两仪，四象嘛，当然就是上面那四种对象了啦&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;当然我是在扯淡。&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;class&#34;&gt;Class&lt;/h3&gt;

&lt;p&gt;在我开始用 JS 搬砖之前，是不那么认真的先用了 Java 和 C++。所以一般看来，在有对象之前必先有类，对象只是类的一个实例而已。就好比找女朋友之前先得构造一个理想女票该有的属性和行为的类，然后再从该类实例化一个对象：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class GirlFriend {
  public static final Integer age = 18;
  public static final String sex = &amp;quot;女&amp;quot;;
  public void eat() {}
  public void shop() {}
  public void sleep() {}

  public static void main(String[] args) {
    GirlFriend honey = new GirlFriend();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这很符合人类的常识，人们喜欢分类，这样便于组织管理，可以将复杂的问题简单化，清晰化。但是，这并不是世界原本的样子，也不能表现出内心最真实的渴求，只是我们自己一厢情愿的束缚。或许只有当你放下类，放下包袱，放弃规则，放纵去爱，放肆自己，放空未来&amp;hellip;&amp;hellip;才能享受这盛夏光年激荡地青春，才会发现，会发现自己喜欢的并不是萝莉，而是御姐&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;这便是 JS 的无类哲学：世界本无类，对象亦无根，本是弱类型，何处惹尘埃？&lt;/p&gt;

&lt;p&gt;然尘世熙攘，你我结庐于人境，谁能不闻车马喧？能够做到超脱的毕竟是少数，这不，ES6 中还是引入了类的概念。&lt;/p&gt;

&lt;p&gt;不过在我看来，ES6 的 class 并未动摇 JS 无类对象的哲学根基，更像是普渡众生的炫迈语法糖。毕竟，&lt;code&gt;typeof class GirlFriend {}&lt;/code&gt; 返回的并不是一个类，而是一个 &lt;code&gt;function&lt;/code&gt;。这意味着JS虽然有 class，本质上依然是构造函数，并不能像 Java 那样表演多继承、嵌套类等“高难度”动作。&lt;/p&gt;

&lt;p&gt;这样也好，让 JSer 们继续做一个不拘一格的自由主义者。&lt;/p&gt;

&lt;h2 id=&#34;混沌篇&#34;&gt;混沌篇&lt;/h2&gt;

&lt;h3 id=&#34;function-vs-object&#34;&gt;function VS object&lt;/h3&gt;

&lt;p&gt;有很长一段时间，我无法清晰的理解 function 和 object 之间的暧昧关系，就像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Function instanceof Object // 返回 true
Object instanceof Function // 依然返回 true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么问题来了，到底是先有 Object，还是先有 Function ？&lt;/p&gt;

&lt;p&gt;按照创世篇的理念来讲，必然是先有 Object 的概念，然后才孕育出 Function，所以 Object 是蛋，Function 是鸡(有关先有蛋还是先有鸡的哲学问题，我是更倾向于先有蛋的。这个蛋是天地未开，阴阳一体，混沌之道。所谓道生蛋，蛋生鸡，鸡中有蛋，蛋中有鸡，鸡又生蛋，蛋又生鸡，蛋蛋鸡鸡，无穷尽也，说的就是这个道理)。&lt;/p&gt;

&lt;p&gt;当然我是有理论依据的，按照 ES2018 中关于 &lt;a href=&#34;https://tc39.github.io/ecma262/#sec-ecmascript-overview&#34;&gt;Object&lt;/a&gt; 的描述：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In ECMAScript, &lt;strong&gt;an object is a collection of zero or more properties each with attributes that determine how each property can be used&lt;/strong&gt;—for example, when the Writable attribute for a property is set to false, any attempt by executed ECMAScript code to assign a different value to the property fails. Properties are containers that hold other objects, primitive values, or functions. A primitive value is a member of one of the following built-in types: Undefined, Null, Boolean, Number, String, and Symbol; &lt;strong&gt;an object is a member of the built-in type Object&lt;/strong&gt;; and &lt;strong&gt;a function is a callable object&lt;/strong&gt;. A function that is associated with an object via a property is called a method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里明确指出了函数是可调用的对象。对象本身的定义就是属性的集合，函数就是拥有特定属性的集合。所以从表面上看，确实是先有对象的概念才衍生出函数的概念。然细思极恐，如果你仔细研读标准，就会发现在对象诞生之时，函数其实已经出现了！所以标准中才叫&lt;a href=&#34;https://tc39.github.io/ecma262/#sec-ecmascript-function-objects&#34;&gt;function object&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An ECMAScript function object is an ordinary object and has the same internal slots and the same internal methods as other ordinary objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是一种既满足先有蛋后有鸡又满足同时有蛋和鸡的量子叠加态。所以这个时候讨论谁先谁后已经没有意义了，本自同根生，相煎何太急？&lt;/p&gt;

&lt;p&gt;况且他们真的是同根生，这是有科学依据的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Object.getPrototypeOf(Function) === Object.getPrototypeOf(Object)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;规范中使用&lt;code&gt;[[prototype]]&lt;/code&gt;表示原型，并提供了&lt;code&gt;getPrototypeOf&lt;/code&gt;方法来获取它，浏览器有一个非标准的实现，可通过&lt;code&gt;__proto__&lt;/code&gt;内部属性来访问，本文图方便就使用&lt;code&gt;__proto__&lt;/code&gt;来访问。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;回到最初的问题，正是因为 Object 和 Function 的&lt;code&gt;[[prototype]]&lt;/code&gt;相同，所以 instanceof 才会返回 true。不过这里的 Object 并不是我们所说的 Object 数据类型，而是对象构造函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;typeof Function // 返回 &amp;quot;function&amp;quot;
typeof Object   // 依然返回 &amp;quot;function&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构造函数都有一个prototype属性，所有通过构造函数实例化的对象的&lt;code&gt;[[prototype]]&lt;/code&gt;都会指向该构造函数的 &lt;a href=&#34;https://tc39.github.io/ecma262/#sec-terms-and-definitions-prototype&#34;&gt;prototype&lt;/a&gt; 属性的引用,即：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;实例对象.__proto__ === 构造函数.prototype              // ①
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所有函数都是基于 Function 构造出来的，由式①可知：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Function 和 Object 作为构造函数，自然不例外
Function.__proto__ === Function.prototype           // ②      
Object.__proto__ === Function.prototype             // ③
在座的各位函数.__proto__ === Function.prototype    // ④
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前面也有说到，所有对象的原型都会指向一个最基本的太极对象，太极原型终于无极。Function 构造函数作为一个特殊的对象，自然也有：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Object.prototype.__proto__ === null
Object.__proto__.__proto__ === Object.prototype
Function.__proto__.__proto__ === Object.prototype   // ⑤
Function.prototype.__proto__ === Object.prototype   // 可由②⑤推出
在座的各位函数.__proto__.__proto__ === Object.prototype // 可由④⑤推出
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;明白了上述道理，也就明白了 JS 原型的真谛，可谓玄之又玄，众妙之门。&lt;/p&gt;

&lt;h3 id=&#34;prototype-chain&#34;&gt;prototype chain&lt;/h3&gt;

&lt;p&gt;ES 原型链的设计，其实是非常符合自然法则的。&lt;/p&gt;

&lt;p&gt;我们每个人看似独立的个体，其实都可以追溯到共同的祖先。就好比 JS 中的对象看似独立，其实都有着同一个原型。原型链就跟血液一样，可以遗传父辈属性实现继承，但是比起血缘关系，又更像是血继限界，除了遗传之外还能进化出新的能力。这一点，比起基于类的继承更加灵活，也更符合进化论的思想。&lt;/p&gt;

&lt;p&gt;但是有一点，ES 是单原型单继承的，这不符合自然规律。现实中孩子一般继承了父母双方的基因。试想一下，如果对象的原型是一个数组，可继承每一个原型对象的属性，那么 JS 世界会发生哪些变化？&lt;/p&gt;

&lt;p&gt;最直接的就是可以支持多继承了，但本质上不会有变化，最终都会上溯到 Object.prototype。不过查户口会变得异常困难。如果要判断一个对象是否具有某个属性，要遍历的就不是原型链了，而是原型网，这是一个十分耗时的操作，所以单继承虽然丧失了生物的多样性，却保持了血统的纯正性，让这门语言可以一直保持简单，优雅。&lt;/p&gt;

&lt;p&gt;嗯，我成功的说服了自己，单原型单继承并不是 JS 的缺陷，而是体现 JS 简单耐用的神来之笔，在前端开发场景下，更能突显出它的优势。因为，老实说，前端的业务场景本就没有后端复杂，没必要引入一套复杂的体系。&lt;/p&gt;

&lt;p&gt;然而原型链设计的最让我诧异的是，实例对象竟然可直接访问并修改原型，从而影响所有其他实例对象，不愧是一把原型链，连接彼此心，牵动你和我：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function GirlFriend() {} // 或者 class GirlFriend {}

// 假设张无忌同时谈了两个女朋友
let zhaoMin = new GirlFriend()
let zhouZhiRuo = new GirlFriend()

// 某天周芷若黑化跟张无忌分手了
zhouZhiRuo.breakUp = true

// 周芷若一气之下将其原型也修改了
zhouZhiRuo.__proto__.breakUp = true

// 然后赵敏也躺枪了，张无忌成单身狗了
console.log(zhaoMin.breakUp) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是不是一件非常可怕的事情！这肯定是一件非常可怕的事情！赵敏是无辜的啊！韦小宝该怎么办？&lt;/p&gt;

&lt;p&gt;后来，我在规范中看到这样一段&lt;a href=&#34;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots&#34;&gt;描述&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Every ordinary object has a Boolean-valued [[Extensible]] internal slot that controls whether or not properties may be added to the object&lt;/strong&gt;. If the value of the [[Extensible]] internal slot is false then additional properties may not be added to the object. In addition, &lt;strong&gt;if [[Extensible]] is false the value of the [[Prototype]] internal slot of the object may not be modified&lt;/strong&gt;. Once the value of an object&amp;rsquo;s [[Extensible]] internal slot has been set to false it may not be subsequently changed to true.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看样子，只要将原型对象的内部属性[[Extensible]]设置为 false 即可防止被子对象篡改。然而由于是内部属性，并不属于 ES 语言的一部分，浏览器也没有像暴露原型一样将其暴露出来，所以此路不通。另外，即使用 ES6 新增的 class，也无法避免被子对象修改的命运，估计在后面的
 ES 版本中会加上 class 限定符吧。&lt;/p&gt;

&lt;p&gt;难道就没有别的办法了吗？解铃还须系铃人，既然问题出在原型上，那么还是得从原型下手。赵敏心想，如果我也直接修改原型上breakUp属性为 false，那么周芷若也会回到无忌哥身边，干脆一不做二不休：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Wife() {}
zhaoMin.__proto__ = Wife.prototype
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从此，张无忌和赵敏过上了幸福快乐的生活。这个故事有些夸张，但你我身边，或许就有周芷若和赵敏这样的人才。&lt;/p&gt;

&lt;p&gt;可以说，ES 的原型链设计的相当自由，它只是提供了一个 playground，至于怎么去写，怎么去玩，规则都可以由你自己定义。ES 设计之初的理念就是越简单越好，所谓大道至简，悟在天成，JS 的灵活，得益于它的简单，JS 的复杂，亦归咎于它的简单。&lt;/p&gt;

&lt;h2 id=&#34;飞升篇&#34;&gt;飞升篇&lt;/h2&gt;

&lt;p&gt;慢慢地，我开始觉着 ES 的设计理念由内到外散发着一股自由的气息，在 JS 的世界中，你可以很面向对象，也可以很面向过程，还可以很函数式；时而腾云驾雾游九州，时而不慎跌落终结谷；有精华亦有糟粕，正如有光明必有阴影。JS 开发路上，可能会经历人生的大彻大悟，大起大落，但这不正是我们生活的真实写照吗？我们要时刻保持一种包容和谦卑的态度，去书写更加优雅和睿智的人生，打造属于前端开发者的未来。&lt;/p&gt;

&lt;p&gt;好了我编不下去了了，先这样吧。本文是&lt;a href=&#34;https://zhuanlan.zhihu.com/p/27537439&#34;&gt;《ECMAScript 2018 标准导读》&lt;/a&gt;中的第一篇番外，感兴趣的话可以关注下，带着哲思搞技术，你会发现编程竟如此有趣。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端图像处理指南</title>
      <link>http://quanfeng.tech/blog/post/img-proc-fe/</link>
      <pubDate>Sun, 08 Jan 2017 21:42:50 +0800</pubDate>
      
      <guid>http://quanfeng.tech/blog/post/img-proc-fe/</guid>
      <description>

&lt;p&gt;计算机图像处理是一门很成熟的技术，任何一门可操作系统接口的语言都能很轻易的实现各种处理操作。但是前端限于浏览器环境和接口限制，处理起来会有诸多不便，这里所说的前端图像处理，是真的指&lt;strong&gt;不借助任何后端服务&lt;/strong&gt;纯前端实现的图像处理。本文会介绍canvas位图处理，SVG矢量图和CSS3图像处理，重点是canvas，并且最后会附上一个&lt;a href=&#34;http://quanfeng.tech/trimpng/&#34;&gt;TrimPNG小应用&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&#34;canvas位图处理&#34;&gt;canvas位图处理&lt;/h1&gt;

&lt;p&gt;HTML5 canvas为我们提供了一块画布，让前端也有了操作位图的功能：图片旋转、缩放、滤镜、压缩等都可以通过JS来实现。&lt;/p&gt;

&lt;h3 id=&#34;图像基本处理&#34;&gt;图像基本处理&lt;/h3&gt;

&lt;p&gt;通过设置drawImage参数可以实现图片绘制、缩放、拉伸和裁剪等操作(&lt;code&gt;注意canvas无法绘制体积过大图片，否则会卡甚至崩掉，大图可以分块读取绘制&lt;/code&gt;)：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//7xp4vm.com1.z0.glb.clouddn.com/canvas_drawImage_DEMO_-_JS_Bin.png-q80&#34; alt=&#34;图片描述&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;详细用法参考 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage&#34;&gt;drawImage()&lt;/a&gt;，DEMO源码戳这里 &lt;a href=&#34;http://jsbin.com/nuqojowayi/edit?html,output&#34;&gt;JS Bin&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;只需要drawImage一个方法，就可以实现基本图形处理功能，再结合鼠标或滚轮事件，就可以实现更复杂的局部放大预览，缩放等功能了。&lt;/p&gt;

&lt;h3 id=&#34;图像滤镜处理&#34;&gt;图像滤镜处理&lt;/h3&gt;

&lt;p&gt;现在的朋友圈发个图都要用滤镜美一下，复古清纯胶片LOMO各种风格应有尽有。canvas提供了getImageData方法来获取图像上每一个像素点的RGBA信息，这样我们就能对图片进行像素级处理了。通过特定算法来重写imageData中的像素信息，然后用setImageData方法把新的数据重新绘制在canvas上，这样就可以实现图像滤镜打码加特效等一系列功能。&lt;/p&gt;

&lt;p&gt;比如我们现在要实现一个复古滤镜:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 复古滤镜处理算法：获取每个像素的RGB信息，并按特定权重返回其加权平均值
let sepiaFilter = function(imgData) {
  let d = imgData.data
  for (let i = 0; i &amp;lt; d.length; i += 4) {
    let r = d[i]
    let g = d[i + 1]
    let b = d[i + 2]
    d[i] = (r * 0.393) + (g * 0.769) + (b * 0.189) // red
    d[i + 1] = (r * 0.349) + (g * 0.686) + (b * 0.168) // green
    d[i + 2] = (r * 0.272) + (g * 0.534) + (b * 0.131) // blue
  }
  return imgData
}
//图像地址必须和当前页面同域，否则会报cross-origin错误 
img.src = &#39;/img/logo@2x.png&#39; 
img.onload = () =&amp;gt; {
  ctx.drawImage(img, 0, 0) // 绘制原图
  let imgData = ctx.getImageData(0, 0, img.width, img.height) // 获取图片信息
  ctx.putImageData(sepiaFilter(imgData), 100, 0) // 绘制处理后图片
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;//sfault-image.b0.upaiyun.com/383/483/3834833829-58706ff1760a3_articlex&#34; alt=&#34;图片描述&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;详细用法参考 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/getImageData&#34;&gt;getImageData()&lt;/a&gt; 和  &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/putImageData&#34;&gt;putImageData()&lt;/a&gt;，DEMO源码戳这里 &lt;a href=&#34;https://jsfiddle.net/vghszt61/2/&#34;&gt;JSFiddle&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;滤镜处理关键在于滤镜算法，要想写出更高级的特效需要有计算机图形学基础，对卷积矩阵、拉普拉斯变换、傅里叶变换等数学知识也要了解，这个坑很大我就不挖了。&lt;/p&gt;

&lt;h3 id=&#34;图像base64存储&#34;&gt;图像base64存储&lt;/h3&gt;

&lt;p&gt;加完特效后如果我们想把图像保存下来，就可以用toDataURL方法来对图片进行格式转换、压缩存储了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 支持三种文件类型：image/png(默认) | image/jpeg | image/webp(仅Chrome)
canvas.toDataURL() // 默认存储为png
// 仅jpeg/webp支持质量参数(0~1,默认0.92)
canvas.toDataURL(&amp;quot;image/jpeg&amp;quot;, 0.1) // 存储为质量为0.1的jpeg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于存储形式是base64编码，原来图片的每三个字节都会被扩展成4字节，所以整体上编码后数据会比原来多约1/3。以下是通过toDataURL存储后的图片和原图大小相关对比数据(&lt;code&gt;数据仅供参考，不具通用性&lt;/code&gt;)：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//7xp4vm.com1.z0.glb.clouddn.com/yy.jpg&#34; alt=&#34;图片描述&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可见存储后图片体积并不是原来的4/3，实际上处理后的图片都会比原图大好几倍，并且不同的图片增大的体积也是不确定的。如果是要上传图片到服务器，可以把base64转化成Blob二进制数据压缩上传；如果要直接在前端显示或供用户下载，jpg还好可以设置质量参数，要是png就没法压缩了。&lt;/p&gt;

&lt;p&gt;只是用toDataURL还不够，用户需要通过&lt;code&gt;手动点击图片-右键图片存储为&lt;/code&gt;来保存图片，如果要实现点击下载按钮自动下载图片还需要修改图片类型为octet-stream，然后利用HTML5的download属性强制让浏览器下载。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;详细用法参考&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL&#34;&gt;toDataURL()&lt;/a&gt;. 自动下载图片DEMO源码快戳我 &lt;a href=&#34;https://jsfiddle.net/0326/vghszt61/4/#&#34;&gt;JSFiddle&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;程序员的备胎&#34;&gt;程序员的备胎&lt;/h3&gt;

&lt;p&gt;有了以上基础，再结合成熟的图形处理算法，我们可以完成日常工作中大部分图像处理需求，以下列出了一些相关轮子可做备胎。备胎这种东西多多益善，万一以后用到了呢？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意：本人很专一。&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;html2canvas-http-html2canvas-hertzen-com-documentation-html&#34;&gt;&lt;a href=&#34;http://html2canvas.hertzen.com/documentation.html&#34;&gt;html2canvas&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;将web页面通过canvas来实现截屏，其原理就是遍历DOM结构和样式，然后在canvas中绘制出来，通过toDataURL输出图片。但由于canvas图片的同源策略限制，如果图片和网站不同源的话会截取不出来的。另外在微信中测试时，即使用同源的图片截取出来的图片也有问题，所以要想将其用于生产环境，还是得看场景，有很多坑要踩。&lt;/p&gt;

&lt;h4 id=&#34;code-to-image-https-github-com-akira-cn-code-to-image&#34;&gt;&lt;a href=&#34;https://github.com/akira-cn/code-to-image&#34;&gt;code-to-image&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;代码转图片工具。有时候你在不同的平台写文章贴代码，由于不同平台代码格式化规范不一，所以经常会出现代码排版问题，通过这个工具将代码转成图片就可以避免排版问题了。&lt;/p&gt;

&lt;h4 id=&#34;cropper-https-fengyuanchen-github-io-cropper&#34;&gt;&lt;a href=&#34;https://fengyuanchen.github.io/cropper/&#34;&gt;Cropper&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一个专门用来做图片裁剪的应用。&lt;/p&gt;

&lt;h4 id=&#34;tracking-js-https-github-com-eduardolundgren-tracking-js&#34;&gt;&lt;a href=&#34;https://github.com/eduardolundgren/tracking.js/&#34;&gt;tracking.js&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一个专业的计算机视觉处理JS库，包含了大量图形处理算法，可用来做人脸识别，色彩追踪等酷炫功能。&lt;/p&gt;

&lt;h4 id=&#34;qrcode2-https-github-com-nicolaszhao-qrcode2&#34;&gt;&lt;a href=&#34;https://github.com/nicolaszhao/qrcode2&#34;&gt;qrcode2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;用JS动态生成二维码，这个库还是很实用的，原理就是qrcode算法+canvas绘图，不支持canvas的用table兼容。&lt;/p&gt;

&lt;h4 id=&#34;alloyimage-https-github-com-alloyteam-alloyimage&#34;&gt;&lt;a href=&#34;https://github.com/AlloyTeam/AlloyImage&#34;&gt;AlloyImage&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;腾讯出的基于HTML5的专业级图像处理开源引擎，功能很强大，简直就是Web版的PS。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/tps/TB1qqF.PXXXXXXFXXXXXXXXXXXX-1381-597.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上列举部分，更多备胎在此： &lt;a href=&#34;https://github.com/0326/canvas&#34;&gt;https://github.com/0326/canvas&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;svg矢量图处理&#34;&gt;SVG矢量图处理&lt;/h1&gt;

&lt;p&gt;讲完位图再说矢量图。矢量图在绘制图标、商业LOGO、动画元素上应用非常广范。Web最开始支持的矢量图形并不是现在的SVG，而是微软主推的VML，所以在低版本IE下面只支持VML而不支持SVG，直到后来SVG成为W3C标准并被普及，微软才在IE9中支持SVG。&lt;/p&gt;

&lt;p&gt;SVG遵循XML规范，可以很好的集成在HTML里面，同时支持JS脚本控制，还有基于SMIL标准的动态内容支持，做起动画来也是非常方便。目前基于SVG的JS图形库轮子也是非常多，如&lt;a href=&#34;https://github.com/svgdotjs/svg.js&#34;&gt;svg.js&lt;/a&gt;, &lt;a href=&#34;http://snapsvg.io/&#34;&gt;Snap.svg&lt;/a&gt;, &lt;a href=&#34;http://velocityjs.org/&#34;&gt;Velocity.js&lt;/a&gt;, &lt;a href=&#34;https://d3js.org&#34;&gt;D3.js&lt;/a&gt;等等，目前暂无SVG应用需求，等用的时候再翻牌子吧。&lt;/p&gt;

&lt;h1 id=&#34;css图像处理&#34;&gt;CSS图像处理&lt;/h1&gt;

&lt;p&gt;如果你的图像特效只是用来给用户展示，并不需要存储的话，可以直接用CSS处理，基本的调整图片大小、拉伸、旋转、裁切等操作直接几个CSS属性width/height/skew/rotate/clip-path等就能搞定了。如果想加特效，使用CSS滤镜Duang的一下就出来了，不需要任何图形学基础和数学知识：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/tps/TB19.p3PXXXXXc0XXXXXXXXXXXX-989-957.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;详细说明见 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter&#34;&gt;CSS filter - MDN&lt;/a&gt;, &lt;a href=&#34;http://jsbin.com/cejifa/edit?html,output&#34;&gt;DEMO 源码见JS Bin&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;

&lt;p&gt;最后介绍个小工具&lt;a href=&#34;http://quanfeng.tech/trimpng/&#34;&gt;TrimPNG&lt;/a&gt;。大家都知道&lt;a href=&#34;https://tinypng.com/&#34;&gt;TinyPNG&lt;/a&gt;可以压缩PNG, &lt;a href=&#34;http://quanfeng.tech/trimpng/&#34;&gt;TrimPNG&lt;/a&gt;顾名思义就是去除图片空白和白边的，实现了自动抠图和切图的功能（logo我是直接抄的TinyPNG，都是熊猫，应该不要紧😝）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//sfault-image.b0.upaiyun.com/448/077/448077878-5871e8180d77c_articlex&#34; alt=&#34;图片描述&#34; /&gt;&lt;/p&gt;

&lt;p&gt;用到的技术点上面都说到了，裁切实现原理就是横向纵向分别扫描两次像素点阵，找出上下左右最外面的非透明点，然后定位出有效图像区域。&lt;del&gt;去除白边算法目前还比较傻逼，只要是接近白色的点都被我干掉了，后面再完善好了&lt;/del&gt; 去白边算法优化了一下，采用标记清除策略（听着耳熟吧，其实就是从GC受的启发&amp;hellip;），先扫描一遍标记出可疑白点，然后再扫描一遍，凡是与透明区域相邻的可疑白点就清除，当然这个算法也比较死，如果有更专业更智能的请务必告诉我。&lt;/p&gt;

&lt;p&gt;体验地址：&lt;a href=&#34;http://quanfeng.tech/trimpng/&#34;&gt;http://quanfeng.tech/trimpng/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本文只抛砖，作为工作时技能储备，如有任何补充欢迎留言交流：）&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>类型系统-前端进化的里程碑</title>
      <link>http://quanfeng.tech/blog/post/typesys-in-fe/</link>
      <pubDate>Fri, 23 Sep 2016 01:42:50 +0800</pubDate>
      
      <guid>http://quanfeng.tech/blog/post/typesys-in-fe/</guid>
      <description>

&lt;p&gt;大半夜的JavaScript Weekly发来贺电：&lt;a href=&#34;https://blogs.msdn.microsoft.com/typescript/2016/09/22/announcing-typescript-2-0/#comment-26185&#34;&gt;TypeScript 2.0 Final Released！&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;没错，继Angular2发布之后，TypeScript今天也发布了2.0版本，这不禁让我浮想一番。如果要说TS和JS最明显的差别，我想一定是Type System，所以今天我们就聊聊类型系统在前端发展历程中，到底扮演了怎样的角色。&lt;/p&gt;

&lt;h2 id=&#34;历史斗争&#34;&gt;历史斗争&lt;/h2&gt;

&lt;p&gt;如果要你把PV上百万级别的Web Application用一门在10天内撸出来的编程语言来开发，我想你肯定不会放心的。然而事实上我们现在都是这样干的，JS已经成为了最流行的编程语言。JS现在所承担的使命已经完全超出了当年设计的初衷，虽然TC39一直在填坑，并且发展到如今的ES6已经相当成熟了，但仍然留下了一些历史包袱，并不能改变这是一门动态弱类型脚本语言的实质。&lt;/p&gt;

&lt;p&gt;因此在前端工程化不断壮大的过程中，为了避免踩坑，人类同JS最佳编码实践方式展开了旷日持久的战争。&lt;/p&gt;

&lt;p&gt;最开始，大家都只是取其精华，去其糟粕，如《JavaScript语言精粹》一书所说：你们只需要用我说的就好了，其他的垃圾都不要学，并且千万不要在项目里面用。&lt;/p&gt;

&lt;p&gt;一般情况下每个公司都会出一套最佳实践的编码规范，程序员需要统一代码风格，按约定编写代码。但规范的约束力很低，结果在项目赶着上线的情况下还是写出了翔一样的代码，所以更好的方式是用工具来规范代码，发现一些潜在问题，通过工具来强制约定编码。比如JSLint，JSHint，以及ESLint，都是设定了一系列编码约定，让你避免写出一些糟糕的代码。&lt;/p&gt;

&lt;p&gt;另外一种思路，就是抛弃使用JS作为开发语言，或者只是把他当成“JVM”,然后采用另外一种设计更加严谨，不容易采坑的语言来编程，比如CoffeeScript和TypeScript,开发完后再转译成JS来运行。&lt;/p&gt;

&lt;p&gt;如果觉得这种方式过于激进，那么可以采用渐进的方式，比如Flow。Flow可以在开发时对代码进行静态类型分析，用写强类型的方式来写弱类型的JS。实质上这有很多好处：
1. 强制声明类型，IDE和编辑器可以通过静态类型分析发现代码隐藏缺陷，同时也能够提供更强大的自动补全，智能代码提示和纠错，达到Java/C++级别的开发体验。
2. 可避免类型隐式转换带来的消耗，提高运行效率。实际上JS引擎在运行时很大的开销都花在类型分析上。
3. 可读性/可维护性增强。一眼就能看出这个变量是String还是Number，代码维护也更清晰，并且通过注释工具生成的代码注释也会更加详细，后面换人维护时也更容易上手。&lt;/p&gt;

&lt;p&gt;这些优势，其实都是类型系统所带来的强类型语言所具有的开发优势，无论是在开发体验还是后期项目维护上，都要优于目前的JavaScript。&lt;/p&gt;

&lt;p&gt;接下来，我们就以渐进的方式，来感受一下类型系统带给我们的好处。&lt;/p&gt;

&lt;h2 id=&#34;类型系统&#34;&gt;类型系统&lt;/h2&gt;

&lt;h3 id=&#34;flow-js&#34;&gt;Flow.js&lt;/h3&gt;

&lt;p&gt;很多情况下我们都是在维护项目，不可能为了增加类型检查来修改老的项目代码。Flow可以在不修改代码的情况下，通过注释的方式来进行静态类型分析，这为我们提供了一个很好的过渡方式。你可以随时在任一个项目里面集成Flow。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/*
* @flow 
* 只需要在文件头部添加flow注释，Flow就会认为这个文件需要静态分析并检查
*/

function foo(x) {
  return x * 10;
}

// 这样调用Flow就会给出错误提示：string和number类型不兼容
foo(&#39;Hello, world!&#39;); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种无侵入式的集成，可以检测出一些比较低级的错误，如果要支持更多强大的分析，就需要写侵入代码了，比如手动类型注释：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* 
* @flow 
* var : [type] 指定变量类型
*/

function add(num1: number, num2: number): number {
  return num1 + num2;
}

// 这样调用就会报错，因为参数2已经被声明为number了
var x: number = add(3, &#39;0&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的代码是不能直接运行的，还是需要Flow工具转译成原生JS才能执行。这种方式就更适合新的项目，一旦新项目直接集成了Flow套餐，就可以直接使用Flow支持的更多功能，并且配合IDE给出更好的开发体验。&lt;/p&gt;

&lt;p&gt;以Mac下的VSC为例，首先安装本地Flow环境：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew update
brew install flow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在VSC中安装启用vscode-flow插件,  ⌘+&amp;rsquo; 打开用户配置，禁用VSC自带的JavaScript校验功能(设置javascript.validate.enable为 false)，并设置好flow的安装目录：
&lt;img src=&#34;//sfault-image.b0.upaiyun.com/327/685/327685980-57e52ab392ae2_articlex&#34; alt=&#34;图片描述&#34; /&gt;&lt;/p&gt;

&lt;p&gt;剩下的套路就跟Babel，ESLint一样了，在项目根目录下面建立一个.flowconfig文件，配置一些校验规则：
&lt;img src=&#34;//sfault-image.b0.upaiyun.com/207/257/2072576123-57e4404200683_articlex&#34; alt=&#34;图片描述&#34; /&gt;&lt;/p&gt;

&lt;p&gt;vscode-flow插件检测到.flowconfig配置后就会启动flow服务去实时分析项目代码，当你开发的时候就能感受到比原生编辑器更加强大的自动补全和智能提示了。比如当你require一个util模块时，flow能分析出util模块内结构，并且当你调用util方法不当时给出提示：
&lt;img src=&#34;//sfault-image.b0.upaiyun.com/200/580/2005809256-57e52e1ebcc7f_articlex&#34; alt=&#34;图片描述&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上只是介绍简单流程，并且还是无侵入式的校验，如果再加上手动类型声明的话，还能提供更多功能。&lt;/p&gt;

&lt;h3 id=&#34;typescript&#34;&gt;TypeScript&lt;/h3&gt;

&lt;p&gt;TS的做法更彻底，如果有一个全新的项目可以自由选择技术方案的话，我一定会选TypeScript而不是Flow.js。可惜的是，在公司里面大部分时候都依赖公司自身的技术体系，在做技术选型的时候都要依赖团队的技术栈。就比如大家都用ES6，你选择TypeScript，那么之后别人来维护你的代码成本就非常高，除非你能煽动整个团队，整个集团使用：）一般情况下这是不可能的，我想这也是TS难以普及的重要原因。&lt;/p&gt;

&lt;p&gt;但是，这并不妨碍TypeScript成为一门优雅的前端开发语言。ES6有的它都有，ES6没有他也有（泛型/枚举/类型推导等只有强类型语言才有的一些特性），而这些特性恰恰更加适合日益壮大的工程化的前端，适合编写出可维护性代码。再配合微软自家的VSC，开发体验妥妥的：
&lt;img src=&#34;//sfault-image.b0.upaiyun.com/126/200/1262003556-57e53c82b3037_articlex&#34; alt=&#34;图片描述&#34; /&gt;&lt;/p&gt;

&lt;p&gt;至于TypeScript 2.0带来了哪些新特性，请直接戳GitHub：
&lt;a href=&#34;https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript&#34;&gt;https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;未来趋势&#34;&gt;未来趋势&lt;/h2&gt;

&lt;p&gt;前几日GitHub 发布了2016开源报告，JavaScript众望所归的荣登榜首，让众前端激动不已：
&lt;img src=&#34;//sfault-image.b0.upaiyun.com/199/416/1994165838-57e434f4afa7d_articlex&#34; alt=&#34;图片描述&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然而让我意外的不是排在第一的JavaScript，而是最后的TypeScript：
&lt;img src=&#34;//sfault-image.b0.upaiyun.com/227/244/227244450-57e435d071ea8_articlex&#34; alt=&#34;图片描述&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//sfault-image.b0.upaiyun.com/276/254/2762546646-57e435e3a2433_articlex&#34; alt=&#34;图片描述&#34; /&gt;&lt;/p&gt;

&lt;p&gt;看这增长趋势，微软是要协TypeScript在开源之路上越走越远了。&lt;/p&gt;

&lt;p&gt;私认为，无论最后是不是TypeScript，类型系统都带来了更好的开发体验，代码质量，代码可读性和可维护性，这正是一个大型或长期项目所必须的，也是现在和未来的前端工程所需要的。所以实在是没有不学的理由，如果你觉得TypeScript像极了C#更适合后端程序员，那么学习它或许是你迈向全栈的一小步哈哈。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web 字体应用指南最佳实践修炼之道（上）</title>
      <link>http://quanfeng.tech/blog/post/web-font-01/</link>
      <pubDate>Sun, 21 Aug 2016 21:42:50 +0800</pubDate>
      
      <guid>http://quanfeng.tech/blog/post/web-font-01/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-7dbfec5bc0c6c8c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;据说把名字取得特别长更容易被搜索到&#34; /&gt;&lt;/p&gt;

&lt;p&gt;据说把名字取得特别长更容易被搜索到。&lt;/p&gt;

&lt;p&gt;故事的起源，要从UED界两大种族前端设计师和视觉设计师的爱恨说起。&lt;/p&gt;

&lt;p&gt;下面是设计师的视觉稿：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-6ae27b1a9a35ce09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;设计师的视觉稿&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下面是前端开发出来的真实效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-956bb7caf993d063.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端开发出来的真实效果&#34; /&gt;&lt;/p&gt;

&lt;p&gt;于是战争爆发了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-fd5af7c83a40fd9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;于是战争爆发了&#34; /&gt;&lt;/p&gt;

&lt;p&gt;像这种视觉效果不一致问题，在日常开发中比比皆是。最近遇到的比较多的是字体问题，开了写轮眼的设计师经常抱怨手机上的字体跟设计稿不一致，前端只能无奈的回一句手机上没这字体啊&amp;hellip;然而实际情况远比这个复杂，正义的王二小见此情况决定挺身而出，踏上了Web字体修真之路，来寻找传说中的最优解。&lt;/p&gt;

&lt;h2 id=&#34;从0开始&#34;&gt;从0开始&lt;/h2&gt;

&lt;p&gt;这将是一次冒险，我们从0开始探索网页中的文字是如何一步步呈现在我们眼前的。计算机的数据，本质上都是由01组成的序列，不同的序列可以传达不同的信息，而同样的序列通过不同的编码和解码方式也会传达不同的信息。&lt;/p&gt;

&lt;p&gt;我们所看到的网页，都是从服务端网络传输而来的一个个数据包通过浏览器解析而成，网络传输其实是一个很复杂的编码解码过程，你可能听过数据段，报文，分组，数据包，数据帧等关键词，这些术语其实只是OSI模型中各个层对数据单位的不同划分，最底层的表示还是以bit为单位的01。假设浏览器现在要渲染一段文本，它从服务端收到的数据包有一段信息是这样的（当然为了简化，除去报文头等信息，假设下面这段信息就页面上要展示的文本信息）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;11100101 10001010 10101000 
11100110 10000100 10011111 
11100101 10110000 10001111 
11100101 10001001 10001101
11100111 10101011 10101111
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是一串字节流，浏览器得到它的第一件事自然是解码，那么第一个问题，编码方式很多种，浏览器怎么知道用哪种方式去解码呢？&lt;/p&gt;

&lt;h2 id=&#34;编码与解码&#34;&gt;编码与解码&lt;/h2&gt;

&lt;p&gt;我们所熟知的编码方式有ASCII，GB2321，UTF-8，UTF-16等等，对于浏览器来说，它会按照以下规则去寻找数据的编码类型：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Web 服务器返回的 HTTP 头中的 Content-Type: text/html; charset=&amp;ldquo;xxx&amp;rdquo;。其中charset=&amp;ldquo;xxx&amp;rdquo;就是编码方式,当浏览器拿到这个信息之后，就能愉快的解码了；&lt;/li&gt;
&lt;li&gt;如果服务端没有指定编码方式，浏览器会去网页文件的head中查找&lt;meta charset=&#34;xxx&#34;&gt;信息，来确定编码方式；&lt;/li&gt;
&lt;li&gt;如果还没找到，那浏览器就只能自行判断编码了，或者让用户设置解码方式。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可以看到，前两步信息都是确定的，只有第三步是无法确定编码方式的。所以为了让你的页面能正常展示出来，一定得要在前两步就设定好charset编码方式，以便于浏览器以你期望的方式解码。&lt;/p&gt;

&lt;p&gt;现代网页通常都使用utf-8的编码方式，所以我们就以此为例。utf-8是unicode字符集的一种实现方式，unicode本质上就是一个表，一个将二进制数据映射到各种文字符号的表，这个表野心很大，想要囊括世界上所有文字符号，并且他也实现了自己的目标，所以它也成了网络世界应用最广泛的一个表。&lt;/p&gt;

&lt;p&gt;假设上面那串字节流采用了utf-8编码,那么根据utf-8字节流到unicode的编码规则：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-49cf3dbde21a08ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Unicode~UTF-8映射表&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到上面那段字节流全都是1110xxxx 10xxxxxx 10xxxxxx的形式，那么根据表中第三行映射关系，应该是3个utf-8字节对应1个unicode编码，将三个字节中的16个x用两个字节表示，然后转化成十六进制的unicode表示，最终可得到以下结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;11100101 10001010 10101000 -&amp;gt; 01010010 10101000 -&amp;gt; \u52a8
11100110 10000100 10011111 -&amp;gt; 01100001 00011111 -&amp;gt; \u611f
11100101 10110000 10001111 -&amp;gt; 01011100 00001111 -&amp;gt; \u5c0f
11100101 10001001 10001101 -&amp;gt; 01010010 01001101 -&amp;gt; \u524d
11100111 10101011 10101111 -&amp;gt; 01111010 11101111 -&amp;gt; \u7aef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到unicode编码之后，我们就可以根据unicode字符表找到对应的文字符号，最终得到了以下结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\u52a8\u611f\u5c0f\u524d\u7aef -&amp;gt; 动感小前端
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果对最终的结果不确定，可以反向验证一下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;escape(&#39;动感小前端&#39;) // &amp;quot;%u52A8%u611F%u5C0F%u524D%u7AEF&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得出的unicode字符数值完全一致，看来计算没错，那么紧接着第二个问题来了，浏览器该如何去展示它？就好比我知道你的名字叫什么，但并不知道怎么写一样。&lt;/p&gt;

&lt;h2 id=&#34;寻找字体&#34;&gt;寻找字体&lt;/h2&gt;

&lt;p&gt;字体的渲染是一个很复杂的过程，首先我们需要知道在Web世界中存在着五大字体家族，江湖人称font-family：serif、sans-serif、monospace、cursive和fantasy。在这五大家族下面，又演变出各个不同的字体，比如宋体，微软雅黑，Arial，Helvetica等等。同样的文字，在不同的字体下面会呈现出不同的效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-807e55c98bf3e11c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;相同大小粗细但不同字体的差别&#34; /&gt;&lt;/p&gt;

&lt;p&gt;但是，不管是什么字体，他们本质上都是一个表。你可以把这个表理解成三个部分：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;轮廓：用来记载字符的形状；&lt;/li&gt;
&lt;li&gt;编码：用来记载字符内部编号与字符形状以及unicode编码之间的映射关系；&lt;/li&gt;
&lt;li&gt;封装：将上面这些东西封装成特定的文件格式&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;想要深入了解字体内部原理，请走支线剧情&lt;a href=&#34;https://book.douban.com/subject/2362953/&#34;&gt;《Fonts &amp;amp; Encodings》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;浏览器在渲染字体时，首先会把这些文字分为不同语言的小段，然后依次确定该用哪一种字体，确定之后按照字符的unicode编码在字体中匹配相应的轮廓，并最终渲染在屏幕上。通常我们都会给页面指定一套字体规则：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;font-family: Helvetica, STXihei, &amp;quot;Microsoft YaHei&amp;quot;, Arial, SimSun,sans-serif; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;浏览器会按照字体声明的顺序依次去寻找系统中已安装的字体，如果找到了就按照该字体渲染，没找到则依次往后查找，如果最后还是没找到，则使用浏览器设置的&lt;strong&gt;神秘的默认字体&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;渲染排版&#34;&gt;渲染排版&lt;/h2&gt;

&lt;p&gt;确定了字体之后，浏览器就真的要去渲染了。如果你以为把字体设置的一样就能万事大吉了，那就太天真了。即使是相同的字体，不同的环境下渲染出来的结果也是不一样的！就好比同样是须佐能乎，不同人产生的形态也是不一样的,先看两张图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-44c01567d212cce1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;相同字体在不同环境下的效果&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-90539a9776d8145d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;放大后的对比效果&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是同一个页面在不同环境下的显示效果，其实如果在真实环境下看的话基本看不出来差别，但是对比一看差别还是很明显的。MBP下是retina屏，显示效果更细腻一些，而MBA下则更厚重些。放大来看，MBP下字体边缘有灰色的边缘（灰度渲染），而MBA下则是彩色的边缘（次像素渲染）。&lt;/p&gt;

&lt;p&gt;可以看到，同样是Mac系统+Chrome浏览器，只是版本号稍微不同，渲染效果就会有所差别。更别说在Windows和Android上了。那么造成这种差异的原因是什么呢？&lt;/p&gt;

&lt;h4 id=&#34;排版引擎&#34;&gt;排版引擎&lt;/h4&gt;

&lt;p&gt;不同浏览器有着不同的渲染引擎，不同的操作系统上面也有不同的文字排版引擎，而浏览器在渲染页面文本的时候都会调用系统的文字排版引擎。不同的排版策略就会造成不同的渲染结果。&lt;/p&gt;

&lt;p&gt;Mac使用的排版引擎为CoreText，Windows7为DirectWrite/GDI,Windows XP则使用GDI。我们不会深入探索各个排版引擎的原理（想要深入了解Web字体渲染知识，可以去&lt;a href=&#34;http://blog.typekit.com/2010/10/05/type-rendering-on-the-web/&#34;&gt;Typekit&lt;/a&gt;上了解更多），只需要知道不同的渲染引擎可能会造成字体有细节上的差异。即使是同一种渲染引擎，采用不同的渲染策略，比如灰度渲染和亚像素渲染，得出的效果也是不一样的。&lt;/p&gt;

&lt;p&gt;Core Text 渲染引擎：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-1da702bbfc543f5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Core Text 渲染引擎&#34; /&gt;&lt;/p&gt;

&lt;p&gt;DirectWrite渲染引擎：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-f571d8243cb139c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;DirectWrite渲染引擎&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GDI渲染引擎，开启标准抗锯齿：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-584d0b7d4257c95e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;GDI渲染引擎，开启标准抗锯齿&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GDI渲染引擎，无抗锯齿：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-7dc48972419e984d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;GDI渲染引擎，无抗锯齿&#34; /&gt;&lt;/p&gt;

&lt;p&gt;由此可看出排版引擎渲染策略的差异是造成字体显示效果不一致的根本原因之一，但是这种差异非常之小，对于普通用户来说，根本不会注意到这些细节，所以前端工程师大可不必为此操心。&lt;/p&gt;

&lt;p&gt;至此，我们终于走完文字从0渲染到屏幕上的整个过程。&lt;/p&gt;

&lt;h2 id=&#34;诸子百家&#34;&gt;诸子百家&lt;/h2&gt;

&lt;p&gt;之前有提到，当浏览器没有找到所声明的字体时，会使用默认字体。问题就在于，这个默认字体到底是什么字体呢？不同设备之间的默认字体又分别是什么？影响默认字体的因素又有哪些呢？&lt;/p&gt;

&lt;p&gt;在旧PC时代，统治人类的主要是windows和mac两大阵营，我们扳着手指头都能列出各大平台和浏览器上的默认字体。但是到了如今的无线乱世，安卓的开源让每个设备厂商都可能会有自己独特的默认字体，这对网页的视觉统一性又带来了巨大的挑战。&lt;/p&gt;

&lt;h4 id=&#34;裸奔字体&#34;&gt;裸奔字体&lt;/h4&gt;

&lt;p&gt;裸奔字体就是你的页面不设置任何样式，浏览器呈现出的默认字体，我写了个小&lt;a href=&#34;aliquanfeng.com/demo/font.html&#34;&gt;demo&lt;/a&gt;，你可以点击试试看你浏览器上面的裸奔字体是啥，也可以扫码看看手机上的情况：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-9839a6fa2a39e9e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;浏览器默认字体测试&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在&lt;a href=&#34;https://app.crossbrowsertesting.com/screenshots/1675917?size=small&amp;amp;type=windowed&#34;&gt;CrossBrowserTesting&lt;/a&gt;上跑了一下效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-f1170d657feb58a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Win8/OSX 部分浏览器对比&#34; /&gt;&lt;/p&gt;

&lt;p&gt;而在本人真机下的效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-7c24d04a0d44b9e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;自上而下分别为Firefox,Safari,Chrome&#34; /&gt;&lt;/p&gt;

&lt;p&gt;很明显能看出，裸奔字体千变万化，根本不靠谱！&lt;/p&gt;

&lt;h4 id=&#34;安全字体&#34;&gt;安全字体&lt;/h4&gt;

&lt;p&gt;好在，现在已经没有人裸奔了，一般都会在页面中手动声明一下字体，比如百度首页是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body{font: 12px arial;} // 写的这么精简是为了省流量么...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;谷歌首页是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body{font-family: arial,sans-serif;} // 好歹加了字体族
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;天猫首页是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body{font: 12px/1.5 tahoma,arial,&amp;quot;\5b8b\4f53&amp;quot;;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;淘宝首页是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body{font: 12px/1.5 tahoma,arial,&#39;Hiragino Sans GB&#39;,&#39;\5b8b\4f53&#39;,sans-serif;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面四种写法可能都有自己的考虑，但仅从终端字体表现的角度来看，很明显淘宝的写法更专业。Arial可谓是支持性最广的字体了，所以大家都用上了，这种被大多数系统所默认支持的字体，就是Web安全字体。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cssfontstack.com/&#34;&gt;CSS Font Stack&lt;/a&gt;上有对Web安全字体的整理，建议设计师们在作图的时候多考虑一下，这样能一定程度上降低视觉差异。并且某些字体其实长得还是蛮像的，你还可以使用安全字体来代替长相相似的非安全字体。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-45dffe609bc17e97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Arial支持性最广，而Helvetica在Mac上100%支持&#34; /&gt;&lt;/p&gt;

&lt;p&gt;到目前为止，我们所做的一切考虑就是让页面字体效果在不同终端下尽可能保持一致，初步结论就是要使用安全字体，然而设计师并不这样想。设计师一般会使用逼格比较高的非安全字体，比如兰亭细黑,苹方字体。一旦浏览器发现系统没有这些字体，就会不断降级，最坏的情况，就是一直降级到默认字体。所以通常我们会在font-family最后加上一个默认的字体族，比如sans-serif，这样浏览器在最坏的情况下也能使用特定的字体族，并在该字体族下选择一名指定字体来展示。&lt;/p&gt;

&lt;p&gt;那么在这些指定的种族背后，被选中的孩子们到底都有谁呢？&lt;/p&gt;

&lt;h4 id=&#34;神秘的默认字体&#34;&gt;神秘的默认字体&lt;/h4&gt;

&lt;p&gt;首先系统会默认安装一些字体，维基上有对Win/Mac内置字体的整理：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_typefaces_included_with_Microsoft_Windows&#34;&gt;Windows 字体列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_typefaces_included_with_OS_X&#34;&gt;Mac OS X 字体列表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后当你安装软件时，有可能会附带安装一些字体，这样你系统上能支持的字体又变多了。在上面那份列表中，Win/Mac共同支持的字体只有Arial, Verdana, Tahoma, Trebuchet MS, Georgia等少数Web安全字体，对于Win/Mac平台实际字体效果分析，请参考此文：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;跨平台字体效果浅析:&lt;a href=&#34;https://isux.tencent.com/5058.html&#34;&gt;https://isux.tencent.com/5058.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;重点说下无线端, &lt;a href=&#34;http://iosfonts.com/&#34;&gt;iOS Fonts&lt;/a&gt; 和&lt;a href=&#34;http://iosfontlist.com/&#34;&gt;iOS Font List&lt;/a&gt;网站整理了一份各个版本的iOS字体清单，可以很方便的查出各版本支持情况：&lt;/p&gt;

&lt;p&gt;Helvetica字体完美支持：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-41168fefdf385c50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Helvetica字体完美支持&#34; /&gt;&lt;/p&gt;

&lt;p&gt;苹方字体从 iOS 9 才开始支持：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-c0acab37107bf77f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;苹方字体从 iOS 9 才开始支持&#34; /&gt;&lt;/p&gt;

&lt;p&gt;虽然方便，但毕竟第三方网站，不排除数据有误的情况，于是附上官网声明的字体清单：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.apple.com/zh-cn/HT4980&#34;&gt;iOS 5：字体列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.apple.com/zh-cn/HT202599&#34;&gt;iOS 6：字体列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.apple.com/zh-cn/HT202771&#34;&gt;iOS 7：字体列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;&lt;del&gt;iOS 8：字体列表&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;&lt;del&gt;iOS 9：字体列表&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于安卓，&lt;strong&gt;原生的安卓&lt;/strong&gt;使用的是Droid Sans(英文/数字)和Droidsansfallback(中文),4.0后修改为Google的开源字体Roboto。而非原生安卓，实在没有总结性可言。比如小米和华为用了方正兰亭黑，锤子则使用了华文黑体，并且同一厂商下的不同手机品牌，同一品牌的不同型号默认字体都可能不同，不做展开。&lt;/p&gt;

&lt;p&gt;一张图总结一下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xp4vm.com1.z0.glb.clouddn.com/WX20170319-123733@2x.png&#34; alt=&#34;各平台默认字体对比&#34; /&gt;&lt;/p&gt;

&lt;p&gt;哦，忘了还有YunOS，貌似是方正兰亭细黑&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;强大的自定义字体&#34;&gt;强大的自定义字体&lt;/h4&gt;

&lt;p&gt;是的，用户可以选择自己喜欢的字体。你永远不知道用户会干什么，什么安全字体，默认字体，一个主题包下来全都是浮云：&lt;/p&gt;

&lt;p&gt;用户修改系统字体：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-d645d4ef24dcdfbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;用户修改系统字体&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当然这不是最绝的，换个字体最多样子变了，最绝的是用户开启老人机模式，放大字体！&lt;/p&gt;

&lt;p&gt;普通-放大模式对比：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-f0e57cbd6932550f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;普通-放大模式对比&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这两招一出，基本会给设计师和前端造成10000+伤害，不过我们仍然可以做点什么：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;严格控制页面布局，字体超出部分截断，保证页面正常显示；&lt;/li&gt;
&lt;li&gt;监测页面缩放情况并给予用户提示；&lt;/li&gt;
&lt;li&gt;页面自适应或者，针对老人模式单独开发一套页面。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;

&lt;p&gt;看到这里王二小已经残血，稍微修整总结一下，字体表现不一致的根本原因有：
- 排版引擎渲染策略差异(影响小，不可规避)
- 各终端默认字体设置差异(影响中，可规避)
- 用户手动设置自定义字体（影响大，不可控）&lt;/p&gt;

&lt;p&gt;目前为止我们能做的就是尽量使用Web 安全字体，针对不同终端对font-family字体选择顺序进行优雅降级，并设置默认字体族来规避风险。&lt;/p&gt;

&lt;p&gt;但只做到这些还远远不够，我们完全处于被动状态，一切都依赖于终端环境的字体情况，并且还没考虑到字体格式，中英混排，字体动画，字体优化，Web标准技术等方面。接下来我们要主动出击，站在巨人的肩膀上去各个击破，打怪升级，去寻找Web字体应用最佳实践之道。&lt;/p&gt;

&lt;p&gt;冒险越来越深入了，等待王二小的将会是什么呢？请看下集：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-f0c2c4a760fed16e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;美丽新世界&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;以下是相关参考资料，若想深入了解，建议仔细研读。&lt;/p&gt;

&lt;h5 id=&#34;web-字体的选择和运用&#34;&gt;Web 字体的选择和运用&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.coding.net/blog/Web-Fonts&#34;&gt;https://blog.coding.net/blog/Web-Fonts&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;网页字体优化&#34;&gt;网页字体优化&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/webfont-optimization?hl=zh-cn&#34;&gt;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/webfont-optimization?hl=zh-cn&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;字体的各个概念术语&#34;&gt;字体的各个概念术语&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zhihu.com/question/20366900 &#34;&gt;http://www.zhihu.com/question/20366900 &lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;字体渲染相关&#34;&gt;字体渲染相关&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ued.ctrip.com/blog/font-rendering.html&#34;&gt;http://ued.ctrip.com/blog/font-rendering.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/21671/&#34;&gt;http://blog.jobbole.com/21671/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://isux.tencent.com/website-font-rendering-process.html&#34;&gt;http://isux.tencent.com/website-font-rendering-process.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/fonts/TrueType-Reference-Manual/RM02/Chap2.html&#34;&gt;https://developer.apple.com/fonts/TrueType-Reference-Manual/RM02/Chap2.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;typekit-web字体渲染系列文章&#34;&gt;Typekit Web字体渲染系列文章&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.typekit.com/2010/10/05/type-rendering-on-the-web/&#34;&gt;http://blog.typekit.com/2010/10/05/type-rendering-on-the-web/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.typekit.com/2010/10/15/type-rendering-operating-systems/&#34;&gt;http://blog.typekit.com/2010/10/15/type-rendering-operating-systems/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.typekit.com/2010/10/21/type-rendering-web-browsers/&#34;&gt;http://blog.typekit.com/2010/10/21/type-rendering-web-browsers/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.typekit.com/2010/11/09/type-rendering-the-design-of-fonts-for-the-web/&#34;&gt;http://blog.typekit.com/2010/11/09/type-rendering-the-design-of-fonts-for-the-web/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.typekit.com/2010/12/08/type-rendering-font-outlines-and-file-formats/&#34;&gt;http://blog.typekit.com/2010/12/08/type-rendering-font-outlines-and-file-formats/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.typekit.com/2010/12/14/a-closer-look-at-truetype-hinting/&#34;&gt;http://blog.typekit.com/2010/12/14/a-closer-look-at-truetype-hinting/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.typekit.com/2010/12/17/type-rendering-review-and-fonts-that-render-well/&#34;&gt;http://blog.typekit.com/2010/12/17/type-rendering-review-and-fonts-that-render-well/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;网页设计中默认字体详解&#34;&gt;网页设计中默认字体详解&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://waxdoll.gitbooks.io/webdesignfoundations/content/appendix/font_browser_default.html&#34;&gt;https://waxdoll.gitbooks.io/webdesignfoundations/content/appendix/font_browser_default.html&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;mac-os-x-字体列表&#34;&gt;Mac OS X 字体列表&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_typefaces_included_with_OS_X&#34;&gt;https://en.wikipedia.org/wiki/List_of_typefaces_included_with_OS_X&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;windows-字体列表&#34;&gt;Windows 字体列表&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_typefaces_included_with_Microsoft_Windows&#34;&gt;https://en.wikipedia.org/wiki/List_of_typefaces_included_with_Microsoft_Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.microsoft.com/typography/fonts/product.aspx&#34;&gt;http://www.microsoft.com/typography/fonts/product.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;开源字体列表&#34;&gt;开源字体列表&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Open-source_Unicode_typefaces&#34;&gt;https://en.wikipedia.org/wiki/Open-source_Unicode_typefaces&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;css-font-stack&#34;&gt;CSS Font Stack&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cssfontstack.com/&#34;&gt;http://www.cssfontstack.com/&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;数字设计之美&#34;&gt;数字设计之美&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://www.typeisbeautiful.com/2009/09/1467/&#34;&gt;http://www.typeisbeautiful.com/2009/09/1467/&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;跨平台字体效果浅析&#34;&gt;跨平台字体效果浅析&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://isux.tencent.com/5058.html&#34;&gt;https://isux.tencent.com/5058.html&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;对比-ios-系统-android-的字体渲染有何区别&#34;&gt;对比 iOS 系统 Android 的字体渲染有何区别&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/21211748&#34;&gt;https://www.zhihu.com/question/21211748&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;ios-font-字体整理&#34;&gt;iOS Font 字体整理&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://iosfonts.com/&#34;&gt;http://iosfonts.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iosfontlist.com/&#34;&gt;http://iosfontlist.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;mars-font-family&#34;&gt;Mars/font-family&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/AlloyTeam/Mars/blob/master/solutions/font-family.md&#34;&gt;https://github.com/AlloyTeam/Mars/blob/master/solutions/font-family.md&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;网页字体设置你了解吗&#34;&gt;网页字体设置你了解吗？&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://ued.ctrip.com/blog/web-page-font-settings-did-you-know.html&#34;&gt;http://ued.ctrip.com/blog/web-page-font-settings-did-you-know.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>小前端一周年杂记</title>
      <link>http://quanfeng.tech/blog/post/ali-one-year/</link>
      <pubDate>Thu, 14 Jul 2016 21:42:50 +0800</pubDate>
      
      <guid>http://quanfeng.tech/blog/post/ali-one-year/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/tps/TB1SBWoKVXXXXXMaFXXXXXXXXXX-1057-697.png&#34; alt=&#34;阿里一年香&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;工作一年了，从学生党变工作党，从野生程序员变职业前端，收货了不少东西，于此一年香之际，记录一下自己的心路历程以及真实想法。&lt;/p&gt;

&lt;p&gt;另外，本文纯感想且不涉及任何技术，所有内容仅代表个人观点，与任何组织及公司无关，若有不当或错误之处请及时指出，以免误伤路人。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;在这一年里，我有幸和大家一起经历了双11，双12，年货节，517通信节等大大小小的活动，为天猫网厅和阿里通信贡献自己的力量，阿里在技术上有着丰厚的沉淀，让我的技术视野开阔了许多，在各路前辈的带领下自己的能力也得到不小提升，在和大家一起共事的过程中也让我学习到了团队合作和交流的很多技能，期间有欢笑也有迷茫，有困难也存在许多问题，但这些对我来说都是一种锻炼和成长，很荣幸能加入到阿里大家庭，感谢你们。&lt;/p&gt;

&lt;p&gt;好了，正式总结写完了，下面开始非正式的。&lt;/p&gt;

&lt;h2 id=&#34;公司和团队&#34;&gt;公司和团队&lt;/h2&gt;

&lt;p&gt;先说下公司吧，本人校招生，也没来实习过，所以来之前怀着满满的敬畏之情，哇，大公司耶，还有好多牛人，做了那么多牛逼的产品和技术，还担心自己能不能适应职场生活和礼仪，能不能胜任工作处理好同事关系。来之后发现自己完全想多了，这就一所“大学”，同事关系都是简单直接，大家都是对事不对人，工作氛围很好，环境也不错，有食堂，有小吃，有餐厅，有咖啡馆，还有自己的园区，除了预料之中的加班之外，一切都好。&lt;/p&gt;

&lt;p&gt;然后是团队，作为前端，our team还是很和谐很会玩的，成员过生日或者工作满周年都会出去小聚一下，业务不忙时还能饭后踢个球，哪天老大高兴还会请客看个电影洗个脚啥的，虽然最浪的还是UED，但是比起后台等其他技术部门还是要好上不少。其实我想说能碰上一个开放和会玩的老大还是很幸运的。&lt;/p&gt;

&lt;h2 id=&#34;生活与工作&#34;&gt;生活与工作&lt;/h2&gt;

&lt;p&gt;本来想把工作和生活分开，毕竟阿里一直倡导员工要“认真生活，快乐工作”，然而发现每天大部分时间都在工作，工作已然是生活的重要部分。自己的状态在这一年中也经历了不少变化，所以就干脆一起写了。&lt;/p&gt;

&lt;h4 id=&#34;lv1-努力工作-认真生活&#34;&gt;LV1:努力工作，认真生活&lt;/h4&gt;

&lt;p&gt;刚来时其实有点虚，以前都是在小作坊小公司玩，突然变得专业起来还是很有压力，只能更加努力的去工作，去学习，去做出更多的东西来证明自己。生活上则是很认真的对待每件事，毕竟身上只有2千块钱，在没发工资的情况下要租房还要买东买西还是很心塞的。&lt;/p&gt;

&lt;h4 id=&#34;lv2-认真工作-随便生活&#34;&gt;LV2:认真工作，随便生活&lt;/h4&gt;

&lt;p&gt;度过实习期后，心里踏实了很多，然后开始认真对待工作中的每件事，毕竟刚来，不能捅娄子。同时回家之后也经常要学习看书，不断提升自己能力。所以生活上就很随便啦，一日三餐都是在公司蹭的，早出晚归回家就没剩多久时间了，周末就在家写点东西，也没怎么锻炼，没怎么出去玩。&lt;/p&gt;

&lt;h4 id=&#34;lv3-努力工作-认真加班&#34;&gt;LV3:努力工作，认真加班&lt;/h4&gt;

&lt;p&gt;淘宝天猫基本是天天在搞活动，一旦遇到双11，年货节，517通信节这种大型活动，光努力工作已经不够了，还得加班，况且对我来说都是第一次，如何优雅的处理产品经理运营UED的需求，以及开发节奏和线上问题还是有挑战的。印象比较深刻的是双11加班到了凌晨4点，517连续加班了2周，并且经常是到晚上两三点, 累的不要不要的。从这之后我才开始重新对待工作和生活的关系。&lt;/p&gt;

&lt;p&gt;其实每天重复的工作和加班，曾让我开始迷茫，感到自己就是一个机器人。首先这些快速迭代的业务代码对我的能力基本没有提升，然后经常性加班耗费了我本就不多的业余时间，长此下去必然是个恶性循环，于是便决定休假调节一下状态。然后就去三亚玩了几天，在那里体验到了很多不一样的东西，感觉自己的人生又到了一个新的台阶，还有很多美好的东西等待着我去追寻。&lt;/p&gt;

&lt;h4 id=&#34;lv4-用心工作-快乐生活&#34;&gt;LV4:用心工作，快乐生活&lt;/h4&gt;

&lt;p&gt;这应该是我目前所能达到的最高境界了。“认真生活、快乐工作”这话肯定是马老师说的：“我特讨厌认真工作的人，工作不要太认真，工作快乐就行，因为只有快乐让你创新，认真只会更多的KPI、更多的压力、更多的埋怨、更多的抱怨，真正把自己变成机器。我们不管多伟大、多了不起、多勤奋、多痛苦，永远记住做一个实实在在、舒舒服服、快快乐乐的人”。&lt;/p&gt;

&lt;p&gt;我觉得后半句说的非常对。&lt;/p&gt;

&lt;p&gt;虽然我很喜欢前端，但对于工作，并未达到“快乐工作”这样的境界。我更认可用心做好每件事。在沟通交流，讨论产品，推动业务每一件小事上都需要花心思，而不是只专注技术。工作一定得用心，最坏的情况就是怀疑一切，把所有人都当“傻逼”，当然，我也是傻逼。运营可能会把页面地址当成图片地址发布上线，导致网站开天窗；产品有时自己都没想好就把需求提过来了：“先这样改，后期我们再逐渐优化”，这是我见过的最不负责任的说法；UED可能在你做到一半时突然把整个页面的风格都换了，而一个小需求则有可能牵扯到好几个业务部门，导致沟通成本高而效率低下，产品的设计也是运营驱动，经常会有资源替换的方式来让产品加上一些很不人性化的东西&amp;hellip;&amp;hellip;还有许多类似问题，然而让人意外的是，It works!&lt;/p&gt;

&lt;p&gt;这些问题都很常见，但我真正想表达的不是如何去埋怨这些问题，而是如何去解决它们。&lt;/p&gt;

&lt;p&gt;运营出问题说明我们的系统人性化和易用性还不够好，需求不稳定可能是我们流程把控有问题，而常改视觉稿说明我们还没有形成一个成熟的规范，沟通成本低说明我们的沟通方式有待改进&amp;hellip;总之，任何团队和企业都会有自己的问题，只有尝试去解决这些问题，才会少更多埋怨，并且个人也会有更多的成就感。好在，阿里人有点让我特别欣慰的就是善于总结和吸取教训，并且会从以往经验中不断完善自己。虽然存在少数老员工有种躺在阿里挣钱的感觉，但总体上讲这还是一支很有活力和激情的队伍，尤其是运营！真心服！&lt;/p&gt;

&lt;p&gt;再说说生活，这一年整体上还是比较放纵，想买啥就买了，无聊的时候就靠买东西打发时间了，各种书，电子产品，吃的穿的。后来想画画了，于是加入了淘宝叼炸天的核物理研究中心手绘技术实验组(虽然好久没去了555)，然后又喜欢上了摄影，本着坚决不用单反不买iPhone的人生原则继续玩安卓渣渣机。生活中培养一些小爱好还是蛮好的，偶尔出去骑车或者参加活动或者旅游啥的调节下节奏也很必要。至于理想啊目标啊啥的鸡汤类的东西就不写了，毕竟生活这种东西，每个人的口味都不一样。&lt;/p&gt;

&lt;h2 id=&#34;设计与美学&#34;&gt;设计与美学&lt;/h2&gt;

&lt;p&gt;这是一个很高深的话题，我要开始装逼了Orz&amp;hellip;.&lt;/p&gt;

&lt;p&gt;一位大神曾经说过，&amp;rdquo;不会搞艺术的程序员不是好设计师&amp;rdquo;。&lt;/p&gt;

&lt;p&gt;我其实很向往这种感觉，每当看到一些美妙的设计，都有一种去当设计师的冲动。&lt;/p&gt;

&lt;p&gt;然而我现在是一名程序员。&lt;/p&gt;

&lt;p&gt;其实&amp;hellip;我原本是，想做漫画家来着。本来我天赋异禀，骨骼惊奇，从小都是左撇子来着，后来一上小学就被老师掰成右手了；本来想考艺校的，然而烧不起于是就去了某科大搬砖；本来是想转专业的，后来发现写代码也挺好玩的于是就掉坑里了。自己大学时也做过一段时间设计，但是并未坚持下来，现在看两年前做的海报和APP简直就跟屎一样，都不好意思说自己曾经是宣传部的，惨的一逼。&lt;/p&gt;

&lt;p&gt;不过据说金牛都是天生的艺术家，看来我还是有机会翻身的。&lt;/p&gt;

&lt;p&gt;我的下一个目标就是不仅要成为一名优秀的前端，还要成为一名优秀的设计。男神说过，设计师的第一步，应该从多看优秀的作品开始，所以，接下来的一年里打算多培养一下自己的审美意识和鉴美能力。一旦我的计划得逞说不定还能偶尔打一下UED的脸，想想都觉得激动！&lt;/p&gt;

&lt;h2 id=&#34;前端与编程&#34;&gt;前端与编程&lt;/h2&gt;

&lt;p&gt;要说收货最大的还数前端，我要开始扯淡了Orz&amp;hellip;.&lt;/p&gt;

&lt;h4 id=&#34;肤浅的认知&#34;&gt;肤浅的认知&lt;/h4&gt;

&lt;p&gt;以前对前端的认知就是网页三剑客，现在来看着实肤浅。&lt;/p&gt;

&lt;p&gt;当年在学校写的东西，要么是SPA官网，要么是微信推广页面，要么是给自个儿用的后台管理系统，而且没有完整的测试，没有线上监控，没有性能优化，完全停留在功能层面。来阿里了才算见识到一个专业前端所要具备的技能。除去所有程序员都具备的编程能力和工程能力，以及协作开发，代码维护能力，前端在项目技术选型，开发构建，调试和测试，发布和版本控制，监控及告警，性能优化与安全，视觉交互与体验等每一个步骤都可以做很多事情，这还不包括发展异常迅猛的前端新技术（各种框架，工具，新的Web API，新的规范和标准），简直眼花缭乱。以前的前端只需要library,而现在则需要framework和workflow。究其根本，是前端承载的业务越来越复杂，需要更强大的架构去支持，如果要你用一句话来描述现在的前端，你会怎么说呢？&lt;/p&gt;

&lt;h4 id=&#34;业务和技术&#34;&gt;业务和技术&lt;/h4&gt;

&lt;p&gt;第一年重点还是业务，主要贡献还是支撑了天猫网厅这边的几次大促活动和活动组件化建设。业务技术上也是走天猫和淘宝各自的工作流，总体概扩起来就是业务取得了不错结果，但技术缺乏强力输出。&lt;/p&gt;

&lt;p&gt;然后说下工作外的，这一年前端依然涌现出了很多新技术，自己也都是浅尝辄止。&lt;/p&gt;

&lt;p&gt;对于框架，React学了一阵实在不习惯那怪异的DSL，并且只写简单demo也没有让我感受到它在复杂应用上的优势，而对业务进行React重构是否真心能降低未来的维护成本我也不得而知；Vue刚学时感觉就是精简版的Angular，简单粗暴但直接有效，实际用上之后会发现非常优雅；而学习Polymer的时候一下子就被惊艳到了，感觉这就是WebComponent的未来。然后当Atom和VSC火了之后又去看了下Electron，然而又是只写了demo；WebVR也是热情了一阵，本想用A-Frame写个VR小游戏的，无奈手机上跑实在太卡，根本没法玩，只能坐等WebAssembly拯救世界了。然而当我一本正经准备去玩WASM的时候，发现将一个简单的helloworld.c程序从源文件编译成asm再到wasm后，居然达到了惊人的114k&amp;hellip;然后再看看WebAssembly的Github,我又陷入了懵逼之中，这玩意儿起码得再过个三四年&amp;hellip;&lt;/p&gt;

&lt;p&gt;所以最终能深入下来的基本没有，更多的像是在玩。玩新技术能增强自己的视野，把握Web的发展潮流，但也会耗费自己的时间，而且真正有收获并且能形成个人竞争力的东西也很少，业务和技术其实需要相互平衡和促进，这点自己做的还不好，应当控制。&lt;/p&gt;

&lt;h4 id=&#34;前端好难&#34;&gt;前端好难？&lt;/h4&gt;

&lt;p&gt;已经不止一次听人说前端越来越难了，我入行晚，大家不要骗我。&lt;/p&gt;

&lt;p&gt;前端这几年确实变化很快，也越来越复杂了，但是用”难”来形容总感觉怪怪的。可能是前端以前太简单了，所以跟以前的前端比越来越难了，但是跟服务端，跟客户端相比前端只能算是步入了工程化的正轨。说前端难的导火索无非是各种新技术的不断涌现，但是这些技术归根到底不外乎4种：&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;开发语言技术&lt;/strong&gt;。比如CSS，ES6&amp;amp;7，WebComponent等语言和开发层面的技术更新，需要我们不断去学习新的东西。但是语言级别的技术迭代是每种程序员都要面对的，像Java,C++,C#,Swift每年也都在不断更新,但从未听客户端工程师说越来越难了。&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;各种开发框架&lt;/strong&gt;。比如React,Vue.js,AngularJS，Polymer这种前端开发框架的不断涌现，其实都是为了解决日益复杂的业务以及不同的用户场景而生的。类比起来就好比当年后台的SSH架构，或者客户端的MFC和WPF。这些技术通常有良好的学习文档，而且工程性很强，若非深入研究，上手难度其实并不高。&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Web能力的扩展&lt;/strong&gt;。包括浏览器不断开放的更多接口比如蓝牙，电池，本地存储，service worker，Houdini等新的API能力，以及像WASM这样的底层优化技术。然而这种类型的技术你要你认真去看标准文档学习其实也还好。&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;众多的开发工具&lt;/strong&gt;。比如Grunt，Gulp，Webpack，npm，eslint，mocha这样的开发工具。除了深入研究或者自己造轮子之外，对于工具的使用基本上认真学习下官方说明和配置教程就可以很快上手了。&lt;/p&gt;

&lt;p&gt;可以看到前端的技术层面都是偏上层，大部分技能都可以在一周或几周内掌握，对于一个毫无计算机专业基础的人来说成为一名前端的学习曲线要比成为一名后台的学习曲线低，唯一不同的是看到前端这么多技术点一开始可能会懵逼。&lt;/p&gt;

&lt;p&gt;所以对比其他工程师来看，技术和编程的本质并没有变，只是前端变得更加工程化，更加专业化了，前端只要打好基础技术再怎么变也不会太难。&lt;/p&gt;

&lt;p&gt;有趣的是，比起变难，我同样不止一次听到有其他端程序员说前端风气很浮夸，没有技术含量。&lt;/p&gt;

&lt;p&gt;很显然我也不赞同这句话，因为有没有技术含量跟你的职位并没有强相关，而是取决你学习和研究的深度。并且，我认为一个好的前端综合要求会比其他工程师更高。好的工程师不会停留在技术表面，而是深入其原理，这也就意味着一名优秀的前端工程师在技术上除了要应付不断更新的新技术，还要具备深厚的专业理论基础，同时在视觉上还需要一定的审美能力，在产品和交互上也需要考虑到各种实现细节和用户体验问题。从项目角度来看，前端处在一个面而非一个点，这是所有其他工程师都不能比的。&lt;/p&gt;

&lt;p&gt;如果把工程师分为工程应用型和技术研究型两种的话，前端一定属于前者。所以一定要说前端难的话，我认为难的不在于技术，而是如何用有限的技术将产品和服务做到极致，这才是我们最需要关心的。&lt;/p&gt;

&lt;h4 id=&#34;一路向前&#34;&gt;一路向前&lt;/h4&gt;

&lt;p&gt;从需求上来看，前端工程师的需求这几年一直很旺盛，随着前端能力的不断拓展，技术要求越来越高，我相信在今后的几年中肯定会持续旺盛下去。从近几年的发展趋势来看，产品开发的重心在不断往前端转移，前端承载的东西也越来越多。到最后后端和客户端很可能只提供服务和载体的功能，技术重心会转移到前端，甚至连业务也会剥离到“前端”。这时候的“前端”肯定跟现在的前端有所区别，可能更接近全栈一些。因为从业务开发角度来看，全栈的前端，能够做到技术上的前后端分离，业务上的前后端融合，这样既降低了沟通成本，也保证了项目的可维护性，这样的工程师应该是企业最想要的吧。&lt;/p&gt;

&lt;p&gt;从技术上来看，web技术一直在迅速发展，整个技术环境也变得更加开放，这将使前端一直保持活力。这点从各大browser vendors的表现就能看出来。这一年整个web界都散发着open的气息，微软放弃IE斯巴达Edge了；谷歌在今年的I/O大会上力推PWA，指明了Web发展的方向；就连一向封闭的苹果在今年的WWDC上也更加开放了，激进的Safari10居然号称完全支持ES6（ES6才正式发布一年呐），还支持3D touch！（去年底曾写过一篇文章预测Web很可能会支持压力感应事件，不到一年就出现了，这速度确实惊人）&lt;/p&gt;

&lt;p&gt;这种高速发展其实有好也有坏，野蛮生长，盛极而衰，最终还是得由程序员来收拾烂摊子。W3C为Web的未来操碎了心，制定了一个又一个标准，在这野蛮增长的时代和众多的标准当中肯定会有一些奇葩,就比如Houdini。这帮人为了解决CSS兼容问题居然又引入了一个新的标准，开放了浏览器渲染路径，试图用新的标准去解决旧标准不兼容问题，那么问题来了，我要拿什么来兼容这新的标准&amp;hellip;斯认为，Web发展的当务之急就是火狐，苹果，谷歌，微软这几个W3C巨头拆掉各自的浏览器研发团队，降低分裂带给全人类的伤害，并且集结众人之力，成立一个W3C浏览器联合开发大队，就叫Internet FireSafarome！&lt;/p&gt;

&lt;p&gt;当然我是在扯淡，总体上，Web技术的发展会不断增强前端的能力，前端的边界会不断拓展，不仅仅只是Node.js，还会扩展到WoT，甚至是网络所能达到的任何地方。前端未来一定会细分出更多职位，形势一片大好。&lt;/p&gt;

&lt;h2 id=&#34;下一年的期望&#34;&gt;下一年的期望&lt;/h2&gt;

&lt;p&gt;深耕技术，务实基础，少耍流氓多看书。&lt;/p&gt;

&lt;p&gt;也期望自己能有更高的眼光去发现美的东西，等过了一年再回头看自己做的东西就跟屎一样，届时不会因为碌碌无为、虚度年华而悔恨,也不会因为为人卑劣、生活庸俗而愧疚.这样总结的时候就能够说：“我已把自己整个的生命和全部的精力献给了世界上最壮丽的事业！”
&lt;img src=&#34;https://img.alicdn.com/tps/TB182O2KVXXXXXwXVXXXXXXXXXX-530-368.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2016.07 杭州，阿里巴巴&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>如何成为一名Chrome应用开发者</title>
      <link>http://quanfeng.tech/blog/post/chrome-webstore-dev/</link>
      <pubDate>Sun, 03 Apr 2016 21:42:50 +0800</pubDate>
      
      <guid>http://quanfeng.tech/blog/post/chrome-webstore-dev/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-6d089496fdf86493.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Chrome网上应用店&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Chrome网上应用店有丰富的应用和插件，这些工具极大的提高了我们的生产效率。不过本文不是给大家推荐那些精品插件名单，而是教你如何作为一名开发者，为Chrome贡献自己的插件。&lt;/p&gt;

&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;

&lt;h4 id=&#34;万里长城第零步-首先你得先翻墙&#34;&gt;万里长城第零步，首先你得先翻墙&lt;/h4&gt;

&lt;p&gt;推荐用收费的VPN，以便于后续的一系列工作。不要把精力都花在了弄免费的翻墙工具上，毕竟收费的也不贵。&lt;/p&gt;

&lt;h4 id=&#34;万里长城第一步-不必去办visa卡&#34;&gt;万里长城第一步，不必去办VISA卡&lt;/h4&gt;

&lt;p&gt;要想在Chrome网上应用店（下文简称webstore）发布应用，需要在webstore&lt;a href=&#34;https://chrome.google.com/webstore/developer/dashboard/&#34;&gt;的开发者信息中心&lt;/a&gt;注册一下，填信息的时候你会发现没有中国大陆地区，所以Google在暗示天朝人民要用假的地址注册，于是我机智的选择了宝岛台湾。&lt;/p&gt;

&lt;p&gt;然后Google还要你提供一个VISA/MasterCard账号，用来缴纳5美元注册费。我差点就真去办VISA卡了，后来网上一查，国内的VISA卡可能会认证失败，去淘宝上买虚拟卡又不放心，奋战一小时后我发现一个神奇的网站：&lt;a href=&#34;https://www.globalcash.hk/&#34;&gt;全球付&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-79d505b3421a5b87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;mastercard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这网站专门用来搞全球购物的，冲100块钱，自动给你生成MasterCard账号，然后你就可以拿这个卡号信息去注册webstore开发者了，分分钟验证通过，并没有网友说的那么麻烦。&lt;/p&gt;

&lt;p&gt;至于剩下的钱，你可以买点儿别的，或者转到其他银行卡里,机智如我。&lt;/p&gt;

&lt;h2 id=&#34;应用开发&#34;&gt;应用开发&lt;/h2&gt;

&lt;h4 id=&#34;基础入门&#34;&gt;基础入门&lt;/h4&gt;

&lt;p&gt;webstore有四种程序类别：应用、游戏、扩展程序、主题背景。&lt;/p&gt;

&lt;p&gt;放心，都是用JS来写的，对于前端来说只有一星门槛。本文不会讲具体基础开发知识，因为这里已经有非常好的教学资料了：
- &lt;a href=&#34;http://www.ituring.com.cn/book/1421&#34;&gt;Chrome 扩展及应用开发&lt;/a&gt;.来自图灵社区的免费电子书，适合入门。
- &lt;a href=&#34;http://open.chrome.360.cn/extension_dev/overview.html&#34;&gt;Chrome扩展开发文档&lt;/a&gt;.来自360极速浏览器翻译的官方文档。
- &lt;a href=&#34;https://developer.chrome.com/extensions&#34;&gt;Chrome 插件开发官方文档(英文)&lt;/a&gt;.前两个适合入门，实际开发的时候还是推荐官方的，查API啥的都很方便。&lt;/p&gt;

&lt;h4 id=&#34;经验之谈&#34;&gt;经验之谈&lt;/h4&gt;

&lt;p&gt;webstore开发本人其实也是新手，但些许经验应该能帮助到其他人：&lt;/p&gt;

&lt;h5 id=&#34;1-如何优雅的调试&#34;&gt;1.如何优雅的调试&lt;/h5&gt;

&lt;p&gt;右键Chrome工具栏的小图标会弹出一个窗口，选择&lt;strong&gt;审查弹出内容&lt;/strong&gt;即可调试。
但是这种方法极度低效，直接chrome://extensions/找到你插件的ID：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-75cb3e37b3f1b0b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Chrome 插件 ID&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后浏览器访问：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chrome-extension://&amp;lt;插件ID&amp;gt;/插件入口html文件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比如我的是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chrome-extension://fnfchnalfnjbjbfeccpophocngdgapad/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以愉快的调试了。&lt;/p&gt;

&lt;h5 id=&#34;2-如何查看其他插件的源码&#34;&gt;2.如何查看其他插件的源码&lt;/h5&gt;

&lt;p&gt;访问chrome://version 找到Chrome插件安装的本机目录：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-b0972ea4f1c6ffa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;chrome://version&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后找到extension目录，所有插件和数据都在这里，可以随便参考其他插件源码。&lt;/p&gt;

&lt;h5 id=&#34;3-不要把js代码写在html文件里&#34;&gt;3.不要把JS代码写在html文件里&lt;/h5&gt;

&lt;p&gt;出于安全考虑，入口html文件中的JS代码只能通过script标签引用外部脚本文件，内嵌的JS代码会失效的。&lt;/p&gt;

&lt;h5 id=&#34;4-注意国际化&#34;&gt;4.注意国际化&lt;/h5&gt;

&lt;p&gt;webstore面向的是全球用户，你辛辛苦苦写的小工具肯定不想只限于国内用户吧，所以在你的项目里面加上_locales文件夹，写代码的时候时刻考虑到如何才能更好地支持国际化。&lt;/p&gt;

&lt;h5 id=&#34;5-用好google&#34;&gt;5.用好Google&lt;/h5&gt;

&lt;p&gt;开发遇到的问题Google一下一般能找到，StackOverflow 和Google网上论坛这两个站点要尤其留意，大部分问题这上面都有解决方案。&lt;/p&gt;

&lt;p&gt;更多小技巧就不一一列举了，多看官方文档，有更详细的介绍。&lt;/p&gt;

&lt;h2 id=&#34;应用发布&#34;&gt;应用发布&lt;/h2&gt;

&lt;p&gt;应用写好之后打包上传就好了，上传时Google会让你提供几张宣传图片，每一个需要填写的选项后面都有详细说明，需要认真阅读一下。&lt;/p&gt;

&lt;p&gt;发布之后大概过上几个小时就能在webstore搜索到你的应用了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1665040-aca4040d210fbca7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;iBookmark&#34; /&gt;&lt;/p&gt;

&lt;p&gt;至此大功告成，之后可以继续关注你的应用情况，适时更新。
最后附上自己写的一个Chrome收藏夹插件源码，仅供参考交流：
&lt;a href=&#34;https://github.com/0326/iBookmark&#34;&gt;https://github.com/0326/iBookmark&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VR元年－感受虚拟现实的力量</title>
      <link>http://quanfeng.tech/blog/post/vr2016/</link>
      <pubDate>Sat, 27 Feb 2016 21:42:50 +0800</pubDate>
      
      <guid>http://quanfeng.tech/blog/post/vr2016/</guid>
      <description>

&lt;h2 id=&#34;vr元年&#34;&gt;VR元年&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;//sfault-image.b0.upaiyun.com/733/315/733315970-56d15c2195867_articlex&#34; alt=&#34;图片描述&#34; /&gt;
虚拟现实（Virtual Reality，简称VR），在大部分人眼中似乎还是一个概念，总觉得离我们很遥远。然而在今年年初的CES（国际消费类电子产品展览会）上，VR技术大放光彩，SONY VR，Oculus Rift，Gear VR，HTC VIVE等设备引爆了人们的眼球，之后在MWC（世界移动通讯大会）上又成为一大焦点。而即将在下个月举行的GDC（游戏开发者大会）上，还专门新增了VR开发的内容。&lt;/p&gt;

&lt;p&gt;其实对VR技术的研究早在上个世纪就开始了，近几年随着电子技术的发展，已广泛受到人们关注，随着众多公司的投入和VR设备的发布，VR终于在今年爆发了。&lt;/p&gt;

&lt;h2 id=&#34;vr究竟是什么&#34;&gt;VR究竟是什么&lt;/h2&gt;

&lt;p&gt;一谈到VR大家肯定会想到不少电影中的场景，比如黑客帝国，盗梦空间，源代码，明日边缘&amp;hellip;然而很遗憾，现在的VR技术并不能达到电影中那种沉浸而真实的效果。&lt;/p&gt;

&lt;p&gt;顾名思义，虚拟现实就是用计算机制造的一个虚拟世界，然后通过佩戴一系列设备让人觉得这个虚拟的世界很真实。它有四个主要特征：&lt;/p&gt;

&lt;h4 id=&#34;存在感&#34;&gt;存在感&lt;/h4&gt;

&lt;p&gt;这个主要靠计算机模拟，渲染出来的场景越真实，人的存在感就越强。以目前的计算机发展水平，渲染出一个以假乱真的世界还是没有问题的。&lt;/p&gt;

&lt;h4 id=&#34;自主性&#34;&gt;自主性&lt;/h4&gt;

&lt;p&gt;自主性指的是虚拟世界中得物体都遵循现实物理定律而运动，这个也是比较好模拟的。&lt;/p&gt;

&lt;h4 id=&#34;感知性&#34;&gt;感知性&lt;/h4&gt;

&lt;p&gt;目前大多数VR厂商做的都是视觉感知，技术比较牛逼的在研究听觉、嗅觉、触觉、运动等感知，并开发相应的设备来增强人的真实存在感。&lt;/p&gt;

&lt;h4 id=&#34;交互性&#34;&gt;交互性&lt;/h4&gt;

&lt;p&gt;用户可以和模拟出来的世界进行交互，要完全做到这一点还有很长的路要走。&lt;/p&gt;

&lt;p&gt;现在的VR技术主要集中在存在感和自主性的研究上，感知上也主要是视觉上做的比较多。现在大部分人能体验到得也就仅限于此了。当这四个特征都比较完善时，就会完成从VR虚拟现实到AR增强现实，从AR增强现实到MR混合现实的演变了，届时电影中得桥段就能真正在生活中上演了。&lt;/p&gt;

&lt;h2 id=&#34;vr带来的冲击&#34;&gt;VR带来的冲击&lt;/h2&gt;

&lt;p&gt;以目前的发展程度，VR在近三五年内不会对人类产生革命性的冲击，但是以下行业会有革命性的突破：
- 游戏行业。这个绝对要排第一个有木有！所有现实中体验不到的你都可以去游戏里面体验，潜力无限啊。
- 色情行业。请自行脑补。
- 电影视频行业。以后谁再说去看3D，IMAX啥的都弱爆了，我要去看VR电影！以后再看演唱会直接戴上VR设备，打开电视机，亲临现场有木有！
- 社交。社交是全人类的需求，VR可以为其带来很多新姿势，尤其是单身狗，请自行发挥想象力。
- 电商。现在网上买衣服啥的都是看图片介绍，以后可以直接VR试穿啦！
- 教育，医疗，军事，旅游，房地产好多好多&amp;hellip;没有做不到的，只有不想改变的。&lt;/p&gt;

&lt;p&gt;VR带来的行业冲击，就好比互联网当年对传统行业的冲击，当然这个冲击的时间周期，应该会比互联网长的多。&lt;/p&gt;

&lt;h2 id=&#34;vr行业现状&#34;&gt;VR行业现状&lt;/h2&gt;

&lt;p&gt;如果说今年是VR元年，那么一波浪潮最开始的时候会是神马样子呢？&lt;/p&gt;

&lt;p&gt;私认为一个字：&lt;strong&gt;乱&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;据艾媒发布的数据，至2020年，中国VR市场规模将超过550亿，相当于2012年的中国移动互联网市场规模。虽然离爆发还有一段距离，但是互联网各大佬已经开始布局了。在风口前连猪都想冲上去，更别说人了，近两年肯定会涌现出一大批VR公司，有大公司撑腰的，也有小公司不怕死的，有一股脑冲上去的想改变世界的，也会有借概念炒作去圈钱的。目前我们需要重点关注的势力有：&lt;/p&gt;

&lt;h4 id=&#34;三星和facebook&#34;&gt;三星和facebook&lt;/h4&gt;

&lt;p&gt;三星的Gear VR和老牌VR厂商Oculus有合作，Oculus下面有大名鼎鼎的Oculus Rift，而facebook又在2014年收购了Oculus，于是三星和facebook决定联手，以三星的硬件势力和facebook的软件势力，这两兄弟组成目前最强CP。&lt;/p&gt;

&lt;h4 id=&#34;htc和valve&#34;&gt;HTC和Valve&lt;/h4&gt;

&lt;p&gt;HTC和Valve联手推出了HTC Vive，这两兄弟追求的是极致的体验，控制器，头盔，感应器完美结合，据说沉浸感非常强。&lt;/p&gt;

&lt;h4 id=&#34;sony-psvr&#34;&gt;SONY PSVR&lt;/h4&gt;

&lt;p&gt;同为三大头显之一的PSVR，个人觉得它的最大优势就是其先天的游戏基因，日后在VR游戏领域必将雄踞一方。&lt;/p&gt;

&lt;h4 id=&#34;微软-谷歌&#34;&gt;微软&amp;amp;谷歌&lt;/h4&gt;

&lt;p&gt;这两家并没有合作关系，放在一起是因为这两兄弟都盛产黑科技。微软的HoloLens，谷歌的Google Glass严格的说是AR，虽然目前来说并不算成功，但是后续动作还是很值得关注的。谷歌还推出了Cardboard来试水，将VR的体验拉到了平民水平，后续应该会推出更高端的产品。&lt;/p&gt;

&lt;p&gt;除此之外，以Magic Leap,Meta,蚁视(ANTVR)，暴风魔镜等新兴团体为代表的冲锋队，以Apple,Intel,NIVIDA,LG,NOKIA等大公司为代表炮兵团，以百度，腾讯，阿里(投资了Magic Leap，阿里不是一家VR公司，是要让别人做VR的公司),TVR,uSens等国内天团组成的工农红军，都加入了这场乱斗。&lt;/p&gt;

&lt;h2 id=&#34;vr创业者&#34;&gt;VR创业者&lt;/h2&gt;

&lt;p&gt;为了添乱，不妨试想一下假如要去做VR创业，应该具备哪些条件，从哪些方面入手。&lt;/p&gt;

&lt;p&gt;首先粗略的把VR领域分为VR设备开发，VR应用开发，VR内容生产。先从设备下手。&lt;/p&gt;

&lt;h4 id=&#34;成立一家vr硬件公司&#34;&gt;成立一家VR硬件公司&lt;/h4&gt;

&lt;p&gt;首先硬件的开发成本比软件的开发成本要低很多，先从硬件入手。VR最关键的硬件是头显设备，所以我们先买一个Gear VR或者Cardboard，然后拆开看下内部构造和原理，然后自己仿造一个，修改一下外观，加上一些辅助设备，然后以人体工学，用户体验为口号宣传和推广，一家简单的VR硬件公司就成立了。当然，我们的产品并不仅仅是这个，这只是我们推广市场的第一步，等拿到融资之后，我们还会开发出一系列可穿戴设备来增强体验，并聘请业内专家打造专业的VR系统&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;成立一家vr软件公司&#34;&gt;成立一家VR软件公司&lt;/h4&gt;

&lt;p&gt;现在的投资人越来越精了，上面这个一看就是唬人的，所以我决定依托现有的硬件平台，比如Oculus，Sony，使用业内先进的VR引擎，在他们的平台上开发VR应用，然后用户通过在相应地VR商店上购买我们的应用来盈利。这个想法实在太棒了，就差程序员了！&lt;/p&gt;

&lt;h4 id=&#34;成立一家vr内容公司&#34;&gt;成立一家VR内容公司&lt;/h4&gt;

&lt;p&gt;好像直接做VR开发成本都蛮高的，而且现在是浪潮初期，风险也比较大，保险一点我们回归到VR内容生产。你想啊，那么多厂商做设备，那他们设备上总得有一些小视频啥的来吸引用户吧。而且这个成本也很低，只要买一个VR摄像头就可以拍记录片了。然后把我们的片子放在应用商店里面供用户免费下载，到了高潮部分再提示用户收取一点手续费&amp;hellip;听起来好像很不错的样子，等我们品牌打响之后可以打造出自己的VR内容平台，让更多地人可以拍片子，做大之后还可以从B2C分离出B2B，做差异化运营，我们的使命就是让用户真正体验到VR带来的乐趣，让天下没有难拍的片子！&lt;/p&gt;

&lt;h2 id=&#34;vr开发者&#34;&gt;VR开发者&lt;/h2&gt;

&lt;p&gt;VR给人带来了全新的体验和交互方式，这也让VR开发比传统软件开发难度更大。&lt;/p&gt;

&lt;h4 id=&#34;vr设备开发&#34;&gt;VR设备开发&lt;/h4&gt;

&lt;p&gt;VR设备包括显示屏，传感器这样的硬件设备，也包括与之配套的软件设备,整个体验过程中的环境建模，系统合成，虚拟现实同步，实时计算，以及消除眩晕等每一个点的介入成本都很高，非平民开发者能玩的，本人对此也知之甚少，就不多说了。&lt;/p&gt;

&lt;h4 id=&#34;vr游戏开发&#34;&gt;VR游戏开发&lt;/h4&gt;

&lt;p&gt;游戏开发都需要Unity，虚幻，CryENGINE，寒霜这样的游戏引擎，而在VR游戏领域，走在前面的是Unity和虚幻4（CE4）。CE4对VR的支持要强于Unity，画面也更加逼真精良，但是学习成本和开发成本都比较高，平台限制也较多。Unity虽然技术上比不过人家，但是在应用数量，开发社区上要远高于CE4，并且上手相对简单，还跨平台，因此要做个人VR游戏开发，Unity是最佳选择。&lt;/p&gt;

&lt;p&gt;这些引擎都会暴露出VR SDK给开发者，相对于设备开发成本已经很低了。&lt;/p&gt;

&lt;h4 id=&#34;vr应用开发&#34;&gt;VR应用开发&lt;/h4&gt;

&lt;p&gt;应用开发所能使用的技术就更多了，除去游戏引擎，你可以使用DirectX,OpenGL,WebGL，编程语言可以用C++,C#,Lua,JS&amp;hellip;&lt;/p&gt;

&lt;p&gt;而作为一名前端，最关注的自然是WebGL和JS在VR界的发展，以及未来的Web会在VR方向走多远。&lt;/p&gt;

&lt;p&gt;火狐已经出了专门的WebVR API和MOZVR团队来研究VR，致力于将虚拟现实引入到Web中来，若真如愿，那么今后的Web开发和交互方式也必将受到冲击。&lt;/p&gt;

&lt;h2 id=&#34;webvr&#34;&gt;WebVR&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;//sfault-image.b0.upaiyun.com/493/836/493836598-56d15c39df5c0_articlex&#34; alt=&#34;图片描述&#34; /&gt;
经常有人会把WebVR和Unity等VR开发引擎做对比，但我觉得这样并不合理，WebVR的使命是&amp;rdquo;BRING HIGH-PERFORMANCE VIRTUAL REALITY TO THE OPEN WEB&amp;rdquo;,是基于互联网的交互式虚拟现实支持。目前来看比起专业的Unity还是相去甚远，但是作为VR的开发入门却是一个不错的选择，宝宝已入手Cardboard，打算基于Firefox Nightly + WebVR + A-Frame来体验VR的开发，之后会不定期分享开发历程。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WebVR草案： &lt;a href=&#34;https://mozvr.github.io/webvr-spec/&#34;&gt;https://mozvr.github.io/webvr-spec/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WebVR API：&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>创业红海-大学生创业实录</title>
      <link>http://quanfeng.tech/blog/post/studengt-entreprencurship/</link>
      <pubDate>Thu, 01 Jan 2015 21:42:50 +0800</pubDate>
      
      <guid>http://quanfeng.tech/blog/post/studengt-entreprencurship/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2015/12/Untitled-design-11.jpg&#34; alt=&#34;浅谈大学生创业&#34; /&gt;&lt;/p&gt;

&lt;p&gt;大学生到底适不适合创业，其实就是天时地利人和。&lt;/p&gt;

&lt;h2 id=&#34;从工作室到公司&#34;&gt;从工作室到公司&lt;/h2&gt;

&lt;p&gt;假如当初没有选择去团队的话，恐怕就不会抵达另外一个精彩的世界了。从一开始打杂做外包，到写后台，最后到前端，工作室从学生组织发展成公司，这其中发生太多。一起走过来的小伙伴们，也在这过程中获得了超乎常人的东西。创业团队的确是最锻炼人的地方，自己在这1年多的时间里学到很多。下面大致把这1年半分为三个时期：&lt;/p&gt;

&lt;h3 id=&#34;外包&#34;&gt;外包&lt;/h3&gt;

&lt;p&gt;最开始刚进入团队，水平还比较菜，好在之前写过网页，就去打车项目调页面了，而且做外包还有钱赚~。所有的东西基本是边学边用，当时看pyramid还是相当痛苦的。后来由于人员变动，前端后端都要写，一些web开发的基本技术都还不了解，简直弱爆了，最后只能硬着头皮不断补课了。这段时间前后端都没有涉及到过深的东西，只是会用会写，仅此而已。&lt;/p&gt;

&lt;h3 id=&#34;创业&#34;&gt;创业&lt;/h3&gt;

&lt;p&gt;后来外包搁浅了，加入了小伙伴的创业项目，这段时间涉及到的东西就更多了，除了写代码，还要帮着写文档，做PPT，跟老大去参加各种路演还有演示。也就是在这时体会到了真正的创业，体会到了互联网创业的成本是可以有多廉价。在此期间，一方面做产品，做了1年有木有，需求改了无数次有木有，真是产品虐我千百遍，我待产品如初恋。&lt;/p&gt;

&lt;p&gt;另一方面还要推销产品，就是去拉投资。其实项目做得是非常棒的，有好些个投资人想投，但都先是被学院那边拦下了(学院也入股了)，毕竟有些事不是你有钱就能行的，还要有资源。也就是在这个时候，去参加创业路演的时候见识了一些投资人，包括光谷创咖的老总和一些&amp;rdquo;大学生CEO&amp;rdquo;，最终拿了创咖的钱，成立公司入驻了光谷创业咖啡的腾讯创业基地。这段时间技术上依旧没有深入，反倒是见识增加了不少。&lt;/p&gt;

&lt;h3 id=&#34;公司&#34;&gt;公司&lt;/h3&gt;

&lt;p&gt;成立公司后团队管理稍微好点了，一是有个像样的办公室了，二是有工资了，三是职能划分更清楚了，除此之外，没有感觉到其他区别。基本还是松管理，而且成员大多是兼职，一边上课一边工作。&lt;/p&gt;

&lt;p&gt;后来由于现实原因，以及考虑到自己的职业发展，还是决定退出，出去看看大世界。&lt;/p&gt;

&lt;h2 id=&#34;大学生创业&#34;&gt;大学生创业&lt;/h2&gt;

&lt;p&gt;大学生到底适不适合创业是一个很有争议性的话题。各行各业的创业行情可能不同，不过我是学IT的，只关心互联网创业。华科每年都有很多校友选择了创业这条路，有很多都取得了不错的成绩，比如PPLive，海豚浏览器，米折网，海投网，面包旅行，脸萌，恋爱笔记，奇米网络&amp;hellip;他们当中有在校直接创业的，也有工作后创业的，能够发展到现在实属不易。之所以说不易，因为创业本身就很艰难，而且他们现在仍然在努力奋斗中。成功者头上都会有各种光环，这种光环散发着无穷的吸引力，诱使一大批人投入创业的海洋。他们不会注意到，征服海洋的永远只是少数人，更多的人都死在了海底。&lt;/p&gt;

&lt;p&gt;网上看过很多关于大学生创业的文章，在&lt;a href=&#34;http://www.woshipm.com/zhichang/110475.html&#34;&gt;创业教父箴言:创业之前&lt;/a&gt;中，Paul Graham就表示说不要在大学里创业。李彦宏也表示不支持大学生创业，原因是学生直接创业失败率太高，而这样的失败对学生的青春年华会造成很不利的影响。上次去参加青桐汇路演，见了不少投资人，市长大人发言时表示支持大学生创业，而到了德迅老总曾李青发言时，又流露出并不看好大学生创业的意思。&lt;/p&gt;

&lt;p&gt;不管是网上看到的还是自己亲身体验到的，对于大学生创业有人支持也有人反对。对于投资人来说不支持大学生创业，因为掏的是他们的钱，而投大学生的话失败率可能更高一些;对于学校就业指导中心的老师或者政府官员，他们当然要鼓励大学生创新创业，这是国家政策。不同身份的人发表观点时可能多少会带一点有色眼镜，有着不同的考虑。就我个人观点而言，以一个&lt;strong&gt;人&lt;/strong&gt;的角度来看，大学生到底适不适合创业，可能跟你是不是大学生就没多大关系。&lt;/p&gt;

&lt;p&gt;这样说有点别扭，明确的说，我认为衡量一个人适不适合创业不在乎他是不是大学生，而在乎他是否具备创业者该有的素质和条件。你不鼓励大学生创业，但的确有很多成功的例子;你说创业失败带来的挫折影响青少年身心健康，但人生面临的挫折多的去了，不在乎是不是创业带来的。每个人的经历和性格都不一样，有的人可能在学生阶段心智和阅历就赶上了一个成年人，有的人可能出去工作了好几年也不见得有创业者的气质。大学生创业现在是一个很热门的话题，因为有很多人都投入了创业的海洋致使其成为一种普遍现象，而之所以越来越多的人选择“跳海”，个人觉得有两个原因：前有楷模，后有人推。&lt;/p&gt;

&lt;h2 id=&#34;创业红海&#34;&gt;创业红海&lt;/h2&gt;

&lt;p&gt;小的时候有段时间烤烟很赚钱，于是村里干部就鼓励乡亲们都去种烟烤烟卖。在砖家的指导下，全村干起了烤烟的活，最后到去卖的时候烤烟已经烂大街了。后来砖家又说种黄姜挣钱，于是又有人被坑了，还好老妈机智，没有听砖家的。干什么事，做的人多了，就容易形成一片红海。现在的创业环境越来越好了，政策更优，天使更多，从大势上看是非常好的，是创新创业机制的不断完善。从现实的角度来看却是非常残酷的，让更多的孩子互相厮杀角逐，甚至去和大公司竞争，优胜劣汰，在探索中成长，这其中总会产生胜利者。对投资人来说，投资10个团队就算9个都失败，最后还有一个成功，那么投资人都赚了。对于创业者来说，成功的同学走向了CXO之路，名利双收，继续奋斗。失败的同学，则要承担所有打击，而且走的越远，这种打击就越严重。&lt;/p&gt;

&lt;p&gt;下面总结一下自己在接触创业（互联网创业）这个过程中的一些思考，先占个坑。&lt;/p&gt;

&lt;h3 id=&#34;初创成员很重要&#34;&gt;初创成员很重要&lt;/h3&gt;

&lt;p&gt;首先所有核心成员必须要有共同的追求和梦想，并且都是能力很强，各有所长的人(成员间的能力和阅历差距不能太大，原因后面分析)。团队人数2-5人最佳，最好有一名核心BOSS。&lt;/p&gt;

&lt;p&gt;如果创始成员股权过于平均，那么就容易产生分歧，不利于凝聚，要知道很多成功的企业都是在核心BOSS的固执下发展起来的。但是股权又不能过于集中，最好其他所有人联合起来时能够干掉大BOSS的想法，防止“独裁”，腾讯创业早期的股权分配就很有参考价值。我们团队的一个问题就是权力过于集中，“独裁”很严重。&lt;/p&gt;

&lt;p&gt;成员必须要有共同的追求是必须的，不然发展到后面有人退出不干，对整个公司发展非常不利，这时又很难找到合适的合伙人，只能贻误商机。合伙人当然要找比较牛逼的人，这样公司发展会顺水很多。&lt;/p&gt;

&lt;h3 id=&#34;创业初期专注产品&#34;&gt;创业初期专注产品&lt;/h3&gt;

&lt;p&gt;互联网创业一定要有技术人员。前期如果没有做出实质性的东西，只拿个商业计划书出来是不会让投资人感兴趣的。而且产品需求一定会经常改，程序员的工作强度非常大，前期技术人员必须占主导地位。至于宣传推广，等拿到投资之后，各方面资源和人脉都有了再推广会省事的多。所以前期专注做好产品就好啦，是金子总会引人注意的。&lt;/p&gt;

&lt;h3 id=&#34;有钱之后依然要专注做产品&#34;&gt;有钱之后依然要专注做产品&lt;/h3&gt;

&lt;p&gt;拿到投资之后就容易曝光，曝光之后就会引起媒体的注意，这个时候可能会有各种访谈和会议。创始人就那么几个，如果把时间都浪费在采访上会影响开发进度。而且万一被大公司注意到了就危险了。互联网以用户为王，做好产品和服务才是优先级最高的。&lt;/p&gt;

&lt;h3 id=&#34;尽早脱离学生气&#34;&gt;尽早脱离学生气&lt;/h3&gt;

&lt;p&gt;从走向创业这条路不归路开始，你就不是在与校园里的同学竞争，而是在社会上竞争。如果成立公司之后还在以学生的思维方式来办事就会带来很多问题。团队成员大多是学生，一边要上学，一边要上班，再辛苦，也比不上一个普通人上一天的班的工作效率。所以我们的开发效率很低，找学生兼职也是致此的原因之一。所以拿到投资之后还是去外边招全职吧，工资福利好是必须的，这种代价是值得的。如果太抠舍不得花钱，最终坑的还是自己。&lt;/p&gt;

&lt;h3 id=&#34;小心投资人&#34;&gt;小心投资人&lt;/h3&gt;

&lt;p&gt;找投资一定要谨慎，毕竟双方都只是建立在利益合作的基础上的。现在的创业团队要拿到上百万的投资并不难，如果只着眼于眼前利益，一不小心可能就成了投资人的打工仔了。不光要有钱，还要有资源，有利于长期合作和长远发展(当然这是最好的情况，如果实在很难拉到投资也没得选，只是后期要把股份赎回来会花相当大的代价)。曾经见过一个很大的笑话，华科某创业团队发展好了，然后说是为了回馈团队(团队之前有投资占股)，要用50万换取团队的百分之xx的股份。好吧，我承认如果是我的话我也会这么做，只是还专门拿出来说是为了“回馈团队”，我还真说不出口。&lt;/p&gt;

&lt;h3 id=&#34;团队管理&#34;&gt;团队管理&lt;/h3&gt;

&lt;p&gt;毫不留情的说，我们的管理很烂。有很多创业者离开团队的原因都是因为管理不当。团队都有一名核心BOSS，如果BOSS连这几个初创成员都管不好，以后更别说一个公司了。&lt;/p&gt;

&lt;p&gt;一个合理的管理方式应该是本着公平，公正和开放的原则的。举个例子：某博士创业拉来了几个本科生和研究生作为合伙人，该博士作为核心，技术能力和阅历都比其他成员强，其他人对博士的能力也非常认可。但是该博士总是对其他人不放心，所有的事都亲力亲为。有时候开会的时候，某些成员没到场，博士也没当回事。团队间交流个人未来发展时，并不是大家坐在一起洽谈，而是博士将其他成员叫到房间单独讨论，搞得神神秘秘的。&lt;/p&gt;

&lt;p&gt;很显然这不是一个正常的创业团队氛围，一开始我认为是博士本身的问题，后来发现导致这种现象的根本原因是团队结构不合理。成员间能力阅历差距过大，很难形成一种平等的地位。假如所有成员的能力阅历都与博士相当，那么就不存在博士所有事都不放心的问题，权力就更容易分配出去，各人各司其职，充分体现自己价值，也就不会存在地位相差过大的问题。&lt;/p&gt;

&lt;h3 id=&#34;重视每个人的价值&#34;&gt;重视每个人的价值&lt;/h3&gt;

&lt;p&gt;成员间能力有差距是必然，有的人贡献大，有的贡献小这是常有的事。但是大家必须重视每个人的价值！人都是有自尊的动物，如果我的价值在这里得不到认可，那我为什么还要留在这里？这一点不光是在创业团队，在任何公司都一样。只不过大公司都有着比较完善的价值体系和激励机制，问题比较小。而学生团队往往在这方面处理的不太成熟，问题就得以放大了。&lt;/p&gt;

&lt;h2 id=&#34;多余的话&#34;&gt;多余的话&lt;/h2&gt;

&lt;p&gt;创业需要强烈的决心和勇气，或者走投无路的放手一搏。现在来看我不具备任何一点，所以还是先准备出去见见世面。成于此文，以备他日。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2015.01 武汉&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>致2013的你</title>
      <link>http://quanfeng.tech/blog/post/2013-summary/</link>
      <pubDate>Sat, 01 Feb 2014 01:42:50 +0800</pubDate>
      
      <guid>http://quanfeng.tech/blog/post/2013-summary/</guid>
      <description>

&lt;p&gt;弱冠之年,以为自己长大了，其实还是太年轻。生命的故事，就这样轮回的上演，永不停息。2013没有特别的意义，只是剧本稍微变得有些意思了。&lt;/p&gt;

&lt;h2 id=&#34;二月的翅膀&#34;&gt;二月的翅膀&lt;/h2&gt;

&lt;p&gt;二月是回家的日子。几次回家都想着趁着假期时间充裕，可以多学点东西，只可恨自己没能坚持下去。以前总是听老师说，“假期是人与人拉开差距的关键时期”，“当你停下时，别人还在奔跑”&amp;hellip;&amp;hellip;.bulabula之类的话，现在看来，需要休息了。&lt;/p&gt;

&lt;p&gt;学校和家乡是两个完全不同的世界。每年回家的时间越来越少，和你们相处的时间也越来越少。年纪大了，便会各种疾病缠身，不想再听到任何关于亲人的不幸。活着就是幸福，健康比什么都重要。你们辛苦了一辈子，我不想让你们一直辛苦下去，我只希望你们能过得好一些，哪怕是放弃某些东西。你们是我的翅膀，自始至终。&lt;/p&gt;

&lt;h2 id=&#34;三月的笼子&#34;&gt;三月的笼子&lt;/h2&gt;

&lt;p&gt;平淡的生活，重复着一天又一天。每天生活在轮转的昼夜之间，当初的新鲜和激情早已荡然无存。慢慢的，开始习惯了这种生活，也开始厌倦这样的自己。所幸你还是个有点追求的人，不想让安逸蒙住自己的眼睛。于是你开始挣脱这三点一线的世界，开始暴露自己的无知。只是你失败了，并没有能飞出三月的笼子。&lt;/p&gt;

&lt;p&gt;所幸，笼子开了，那些更为广阔的世界，也初现端倪。&lt;/p&gt;

&lt;h2 id=&#34;四月的专注&#34;&gt;四月的专注&lt;/h2&gt;

&lt;p&gt;很喜欢在图书馆看书的感觉，安静，沉溺。只是想很专注的做一件事情，自始至终的去完成它，不在乎这会产生多大意义。只是想看看，自己能不能一直坚持下去。结果还是差强人意，自己需要更加静心才行。对于自己喜欢的事，总是发现时间就在不经意间过去了。有时在作图时，一天很快就过去了，有时在写代码时，一个下午很快就没了。有次专注到自己连晚饭都忘了吃，直到半夜肚子叫了才意识过来，想想还真是有些搞笑呢。&lt;/p&gt;

&lt;h2 id=&#34;五月的离歌&#34;&gt;五月的离歌&lt;/h2&gt;

&lt;p&gt;“我们往往在失去的时候才明白自己曾经拥有的东西是多么美丽，然而，当我们拥有时，才明白自己真正失去过什么。如果没有离开从前的那个人，或许你永远不会知道，你会找到一段更好的爱情。&lt;/p&gt;

&lt;p&gt;尘世屋檐下，有多少人来人往，就有多少光阴的故事在上演。回眸过往，总有一段情，惊艳了岁月；总有一个人，温柔了时光。相遇，是轻盈岁月的暗香，错过，是驻足在心底的惆怅。那些铭心的过往，不过是在一朵花开的时光里，途径了彼此的盛放。”&lt;/p&gt;

&lt;p&gt;对不起，没能及时安慰你，其实我想说，分手是你的错，但作为朋友，是我的失职。&lt;/p&gt;

&lt;h2 id=&#34;六月的梦想&#34;&gt;六月的梦想&lt;/h2&gt;

&lt;p&gt;小时候的梦想是当一名漫画家，这多多少少给了自己增添了一些艺术细胞。后来觉得漫画家不能拯救世界，就想当一名动画制作人，来拯救这个狼狈的中国市场。胸怀大志的小小少年这样幻想着，然而时间先生却让现实一步一步揭开生活的面纱。看清了自己，也就看淡了生活——你的确很优秀，但绝非卓越。好歹，现在还能做一名设计师，虽然很可能是软件设计师或者前端设计师，但也不至于让梦想死的如此狼狈不堪。不清楚自己未来的方向，也不知道自己能坚持多久，因为自己毕竟不是那种典型的程序员，对代码有着疯狂的热爱。也罢，未来的事谁也无法预料，迷茫的根本在于不清楚自己的能力，而当能力还不足以撑起未来的路灯时，你还是好好努力吧！&lt;/p&gt;

&lt;h2 id=&#34;七月的代码&#34;&gt;七月的代码&lt;/h2&gt;

&lt;p&gt;每到一个新的地方，都是一段新的冒险。大家站在同一起跑线上，只不过有的人走，有的人跑，而有的人开车。开车的人条件好，到达终点的速度固然快，而没车的人也不用自卑，因为只要坚持下去，就一定会到达目的地，这只是时间问题。没有人会嘲笑一个孩子爬的慢，孩子终究会长大的嘛，可怕的是这孩子长大了还在继续爬。&lt;/p&gt;

&lt;p&gt;软件可以是个人，但软件工程肯定会是团体。从最初的代码，到后来的代码+美工，再到后来的代码+美工+运营，一步一步地体验到整个流程，一点一点的进步，真好。顺便说一句，遇到一个尴尬的团队真尼玛操蛋，遇到一个优秀的团队就一定要好好珍惜。还有，团队领导人真的很重要！额，瞬间感觉亚历山大。&lt;/p&gt;

&lt;p&gt;有关学习，自己要学的真的还有很多！身边这么多大神，就应该好好利用啊。自己也得加油，抓紧吧~&lt;/p&gt;

&lt;p&gt;永远对自己有信心，对自己的项目有信心。对自己的付出应该要有一种自豪感，因为我们所做的东西是有益于这个社会的，而正是这种自豪感，让你怀着责任感一直做下去，并且会做的越来越好。&lt;/p&gt;

&lt;h2 id=&#34;八月的期待&#34;&gt;八月的期待&lt;/h2&gt;

&lt;p&gt;头一次感觉华科的阳光，是如此地充满了正能量。辗转于网络中心和国际教育学院之间，每一天都看似如此充实。遗憾的是最终未能如愿。感谢失败，让我发现自己的不足，也感谢你们，给我创造如此好的机会。大学是个不用为失败付出惨痛代价的地方，勇敢的去面对，每天都是更好的自己。&lt;/p&gt;

&lt;p&gt;八月本是放假的时间，很期待见到你们。可能是显得有些仓促，结果是有些可惜。人是温暖的动物，是否这个夏天太热，覆盖了彼此的体温？不过没关系，即使如此，我仍然可以透过你的眼神，感觉到特别的暖意。&lt;/p&gt;

&lt;h2 id=&#34;九月的启明&#34;&gt;九月的启明&lt;/h2&gt;

&lt;p&gt;顺利的步入大三了，从目前的大学经历来看，一切都像大一时计划的那样，虽然有一点小偏差，但总体上还在掌握之中。对于大学的学习和考试，已经不像当初那么在乎了，就算平时不听课，考前花上一两个星期复习也OK。曾经几次以为自己要挂了，但事实证明大学要挂科真的比较困难。于是乎，对于学习也变得越来越松懈，转而向能力的加强，毕竟一切以就业挣钱为目的。然而，好在自己还是个有点追求的人，最终还是意识到这样有些问题：对于大学教育，我们学到的到底是什么？&lt;/p&gt;

&lt;p&gt;大学让我们成为一个有温度会思考的人，大学给了我们足够的时间去思考和实践一个有意义的人生。在这个除了自己没人能管住你的学校里，很容易让人松懈颓废；在这样有关没关都要学的课程里，很容易让人产生厌学情绪；在这个两三天就能解决半学期课程的环境里，的确培养了我们的速学能力和心理抗压能力，但也容易让人变的浮躁。知识学的再多都会忘记，能用到的才是你真正需要的。我们学到了所需的能力，但却在大学逐渐埋葬了梦想，湮没了天真，麻木了人格，遗忘了自己。&lt;/p&gt;

&lt;p&gt;不过好在，身边有一群优秀的小伙伴们，你们是我前行的启明。&lt;/p&gt;

&lt;h2 id=&#34;十月的追忆&#34;&gt;十月的追忆&lt;/h2&gt;

&lt;p&gt;难得能和以前的孩子们玩的如此开心，仿佛又回到了中学那个天真的年代，虽然现在只剩下模糊的记忆，但那种感觉是铭心难忘的。长沙，虽然只去过几次，却感觉如此亲切。第一次去的时候还是如此的青涩，见识到了各地的牛人，认识了一群有志青年，未来依然若隐若现，你们却知道自己应该要做什么。而现在，没有了以前的拘谨，多了几份放荡，因为长沙还是以前的长沙，而有志青年呢，变成了一群二逼青年&amp;hellip;&amp;hellip;哈，我感觉我真的是和什么样的人都能好好相处呢。不过可惜的是没有看到我那只调皮的妹妹，这样也好~&lt;/p&gt;

&lt;h2 id=&#34;十一月的收获&#34;&gt;十一月的收获&lt;/h2&gt;

&lt;p&gt;有付出总会有收获的，今年的经历还是蛮丰富的。能靠自己所学的知识来挣钱真的是件很骄傲的事；自己的东西能在众多作品中脱颖而出也是件很自豪的事；基金会的助学金能下来也是件很欣慰的事，这样就不用家里花钱啦。以后就可以很自豪的对自己说：大学可以白上了！&lt;/p&gt;

&lt;h2 id=&#34;十二月的奇迹&#34;&gt;十二月的奇迹&lt;/h2&gt;

&lt;p&gt;不想谈论食品健康，在这样的环境下还是自己留心点为好；不想谈教育，同样的教育环境下能培养出傻子也能培养出天才；不想谈恋爱，自己还是太年轻，这种事待会儿再说；不想谈原则，有些事情有了第一次就会有第二次，在感情的煽动下原则是那么的摇摆不定；不想谈音乐，虽然迷上了EXO，cause it is still Yanni and Westlife&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;有奇迹必有突破，有突破更能看清，看清后才知道自己想要什么。这十二月的奇迹，充满了共鸣的语言。&lt;/p&gt;

&lt;h2 id=&#34;十三月的沉香&#34;&gt;十三月的沉香&lt;/h2&gt;

&lt;p&gt;从未如此期望过回家，而当期望变成了失望，先前的一切预想都显得毫无意义，好在我们还年轻，可以重新来过。不去想就没有事，或许这就是我们的命运吧。&lt;/p&gt;

&lt;p&gt;尝试去倾听不同的声音，我已不再年轻，时间不允许驻足，渐渐的要承担起大人们的责任，这是男人的命运。&lt;/p&gt;

&lt;p&gt;有机会的话还是多出去走走。明白了文化的积淀，也就明白了人与人之间性格的差异。与人，真诚远远不够，只有付出到让人感动时，才会明白我们应该是要彼此珍惜的朋友。年华向晚，岁月沉香，友谊相伴，一路同行。&lt;/p&gt;

&lt;p&gt;致2013的你，今后要好好去爱那些陪伴你的人，好好珍惜那些即将离开你的人，好好去做当下的每一件事情。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2014.01，桑植&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>